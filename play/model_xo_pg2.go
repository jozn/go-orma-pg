// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"ms/sun/config"
	"ms/sun/helper"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/jmoiron/sqlx"
)

// Comment represents a row from 'public.comments'.

// Manualy copy this to project
type __Comment struct {
	Id          int    `json:"Id"`          // Id -
	UserId      int    `json:"UserId"`      // UserId -
	PostId      int    `json:"PostId"`      // PostId -
	Text        string `json:"Text"`        // Text -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Comment exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted provides information if the Comment has been deleted from the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the Comment to the database.
func (c *Comment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.comments (` +
		`UserId, PostId, Text, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime)
	res, err := db.Exec(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ID = int(id)
	c._exists = true

	return nil
}

// Insert inserts the Comment to the database.
func (c *Comment) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.comments (` +
		`UserId, PostId, Text, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime)
	res, err := db.Exec(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ID = int(id)
	c._exists = true

	return nil
}

// Update updates the Comment in the database.
func (c *Comment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.comments SET ` +
		`UserId = $1, PostId = $2, Text = $3, CreatedTime = $4` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime, c.ID)
	_, err = db.Exec(sqlstr, c.Userid, c.Postid, c.Text, c.Createdtime, c.ID)
	return err
}

// Save saves the Comment to the database.
func (c *Comment) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Replace(db)
}

// Delete deletes the Comment from the database.
func (c *Comment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.comments WHERE Id = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Comment_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Comment_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Comment_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewComment_Deleter() *__Comment_Deleter {
	d := __Comment_Deleter{whereSep: " AND "}
	return &d
}

func NewComment_Updater() *__Comment_Updater {
	u := __Comment_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewComment_Selector() *__Comment_Selector {
	u := __Comment_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Comment_Deleter) Or() *__Comment_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Deleter) Id_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) Id_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) Id_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
    d.
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) Id_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) UserId_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) UserId_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) UserId_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) UserId_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) PostId_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) PostId_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) PostId_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) PostId_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Deleter) CreatedTime_In(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) CreatedTime_NotIn(ins []int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) CreatedTime_EQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_NotEQ(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_LT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_LE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_GT(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Deleter) CreatedTime_GE(val int) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Comment_Updater) Or() *__Comment_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Updater) Id_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) Id_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) Id_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) Id_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) UserId_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) UserId_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) UserId_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) UserId_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) PostId_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) PostId_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) PostId_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) PostId_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Updater) CreatedTime_In(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) CreatedTime_NotIn(ins []int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) CreatedTime_EQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_NotEQ(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_LT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_LE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_GT(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Updater) CreatedTime_GE(val int) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Comment_Selector) Or() *__Comment_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Comment_Selector) Id_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) Id_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) Id_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) Id_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) UserId_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) UserId_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) UserId_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) UserId_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) PostId_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) PostId_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) PostId_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) PostId_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Comment_Selector) CreatedTime_In(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) CreatedTime_NotIn(ins []int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) CreatedTime_EQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_NotEQ(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_LT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_LE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_GT(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Comment_Selector) CreatedTime_GE(val int) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Comment_Deleter) Text_In(ins []string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Deleter) Text_NotIn(ins []string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Deleter) Text_Like(val string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Deleter) Text_EQ(val string) *__Comment_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Comment_Updater) Text_In(ins []string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Updater) Text_NotIn(ins []string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Updater) Text_Like(val string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Updater) Text_EQ(val string) *__Comment_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Comment_Selector) Text_In(ins []string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Comment_Selector) Text_NotIn(ins []string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Comment_Selector) Text_Like(val string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Comment_Selector) Text_EQ(val string) *__Comment_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Comment_Updater) Id(newVal int) *__Comment_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Comment_Updater) Id_Increment(count int) *__Comment_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Comment_Updater) UserId(newVal int) *__Comment_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Comment_Updater) UserId_Increment(count int) *__Comment_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Comment_Updater) PostId(newVal int) *__Comment_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Comment_Updater) PostId_Increment(count int) *__Comment_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Comment_Updater) Text(newVal string) *__Comment_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

func (u *__Comment_Updater) CreatedTime(newVal int) *__Comment_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Comment_Updater) CreatedTime_Increment(count int) *__Comment_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Comment_Selector) OrderBy_Id_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_Id_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Comment_Selector) Select_Id() *__Comment_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Comment_Selector) OrderBy_UserId_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_UserId_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Comment_Selector) Select_UserId() *__Comment_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Comment_Selector) OrderBy_PostId_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_PostId_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Comment_Selector) Select_PostId() *__Comment_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Comment_Selector) OrderBy_Text_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_Text_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Comment_Selector) Select_Text() *__Comment_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Comment_Selector) OrderBy_CreatedTime_Desc() *__Comment_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Comment_Selector) OrderBy_CreatedTime_Asc() *__Comment_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Comment_Selector) Select_CreatedTime() *__Comment_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Comment_Selector) Limit(num int) *__Comment_Selector {
	u.limit = num
	return u
}

func (u *__Comment_Selector) Offset(num int) *__Comment_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Comment_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.comments"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Comment_Selector) GetRow(db *sqlx.DB) (*Comment, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Comment{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Comment_Selector) GetRows(db *sqlx.DB) ([]Comment, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Comment
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Comment_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Comment_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Comment_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Comment_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Comment_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.comments SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Comment_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.comments WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Comment ////////////////
func MassInsert_Comment(rows []Comment, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.comments (" +
		"UserId, PostId, Text, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Text)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Comment(rows []Comment, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.comments (" +
		"UserId, PostId, Text, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Text)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// FollowingList represents a row from 'public.following_list'.

// Manualy copy this to project
type __FollowingList struct {
	Id            int    `json:"Id"`            // Id -
	UserId        int    `json:"UserId"`        // UserId -
	ListType      int    `json:"ListType"`      // ListType -
	Name          string `json:"Name"`          // Name -
	Count         int    `json:"Count"`         // Count -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -
	TRIAL_COLUMN7 int    `json:"TRIAL_COLUMN7"` // TRIAL_COLUMN7 -
	TRIAL_COLUMN8 int    `json:"TRIAL_COLUMN8"` // TRIAL_COLUMN8 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingList exists in the database.
func (fl *FollowingList) Exists() bool {
	return fl._exists
}

// Deleted provides information if the FollowingList has been deleted from the database.
func (fl *FollowingList) Deleted() bool {
	return fl._deleted
}

// Insert inserts the FollowingList to the database.
func (fl *FollowingList) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.following_list (` +
		`Id, ListType, Name, Count, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8)
	res, err := db.Exec(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fl.Userid = int(id)
	fl._exists = true

	return nil
}

// Insert inserts the FollowingList to the database.
func (fl *FollowingList) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.following_list (` +
		`Id, ListType, Name, Count, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8)
	res, err := db.Exec(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fl.Userid = int(id)
	fl._exists = true

	return nil
}

// Update updates the FollowingList in the database.
func (fl *FollowingList) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.following_list SET ` +
		`Id = $1, ListType = $2, Name = $3, Count = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8, fl.Userid)
	_, err = db.Exec(sqlstr, fl.ID, fl.Listtype, fl.Name, fl.Count, fl.TrialColumn6, fl.TrialColumn7, fl.TrialColumn8, fl.Userid)
	return err
}

// Save saves the FollowingList to the database.
func (fl *FollowingList) Save(db XODB) error {
	if fl.Exists() {
		return fl.Update(db)
	}

	return fl.Replace(db)
}

// Delete deletes the FollowingList from the database.
func (fl *FollowingList) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fl._exists {
		return nil
	}

	// if deleted, bail
	if fl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.following_list WHERE UserId = ?`

	// run query
	XOLog(sqlstr, fl.Userid)
	_, err = db.Exec(sqlstr, fl.Userid)
	if err != nil {
		return err
	}

	// set deleted
	fl._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingList_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingList_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingList_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingList_Deleter() *__FollowingList_Deleter {
	d := __FollowingList_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingList_Updater() *__FollowingList_Updater {
	u := __FollowingList_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingList_Selector() *__FollowingList_Selector {
	u := __FollowingList_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingList_Deleter) Or() *__FollowingList_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Deleter) Id_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Id_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Id_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Id_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) UserId_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) UserId_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) UserId_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) UserId_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) ListType_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) ListType_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) ListType_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) ListType_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) Count_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Count_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Count_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) Count_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN6_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN6_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN7_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN7_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN8_In(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) TRIAL_COLUMN8_NotIn(ins []int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_EQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_NotEQ(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_LT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_LE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_GT(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Deleter) TRIAL_COLUMN8_GE(val int) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingList_Updater) Or() *__FollowingList_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Updater) Id_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Id_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Id_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Id_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) UserId_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) UserId_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) UserId_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) UserId_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) ListType_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) ListType_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) ListType_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) ListType_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) Count_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Count_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Count_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) Count_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) TRIAL_COLUMN6_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN6_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) TRIAL_COLUMN7_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN7_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Updater) TRIAL_COLUMN8_In(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN8_NotIn(ins []int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_EQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_NotEQ(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_LT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_LE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_GT(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Updater) TRIAL_COLUMN8_GE(val int) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingList_Selector) Or() *__FollowingList_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingList_Selector) Id_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Id_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Id_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Id_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) UserId_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) UserId_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) UserId_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) UserId_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) ListType_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) ListType_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) ListType_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) ListType_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) Count_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Count_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Count_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) Count_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) TRIAL_COLUMN6_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN6_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) TRIAL_COLUMN7_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN7_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingList_Selector) TRIAL_COLUMN8_In(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) TRIAL_COLUMN8_NotIn(ins []int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_EQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_NotEQ(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_LT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_LE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_GT(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingList_Selector) TRIAL_COLUMN8_GE(val int) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__FollowingList_Deleter) Name_In(ins []string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Deleter) Name_NotIn(ins []string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Deleter) Name_Like(val string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Deleter) Name_EQ(val string) *__FollowingList_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FollowingList_Updater) Name_In(ins []string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Updater) Name_NotIn(ins []string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Updater) Name_Like(val string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Updater) Name_EQ(val string) *__FollowingList_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__FollowingList_Selector) Name_In(ins []string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingList_Selector) Name_NotIn(ins []string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__FollowingList_Selector) Name_Like(val string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingList_Selector) Name_EQ(val string) *__FollowingList_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingList_Updater) Id(newVal int) *__FollowingList_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) Id_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingList_Updater) UserId(newVal int) *__FollowingList_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) UserId_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingList_Updater) ListType(newVal int) *__FollowingList_Updater {
	u.updates[" ListType = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) ListType_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" ListType = ListType+? "] = count
	}

	if count < 0 {
		u.updates[" ListType = ListType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__FollowingList_Updater) Name(newVal string) *__FollowingList_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__FollowingList_Updater) Count(newVal int) *__FollowingList_Updater {
	u.updates[" Count = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) Count_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" Count = Count+? "] = count
	}

	if count < 0 {
		u.updates[" Count = Count-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingList_Updater) TRIAL_COLUMN6(newVal int) *__FollowingList_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN6_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingList_Updater) TRIAL_COLUMN7(newVal int) *__FollowingList_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN7_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingList_Updater) TRIAL_COLUMN8(newVal int) *__FollowingList_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

func (u *__FollowingList_Updater) TRIAL_COLUMN8_Increment(count int) *__FollowingList_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingList_Selector) OrderBy_Id_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Id_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Id() *__FollowingList_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingList_Selector) OrderBy_UserId_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_UserId_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingList_Selector) Select_UserId() *__FollowingList_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingList_Selector) OrderBy_ListType_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY ListType DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_ListType_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY ListType ASC "
	return u
}

func (u *__FollowingList_Selector) Select_ListType() *__FollowingList_Selector {
	u.selectCol = "ListType"
	return u
}

func (u *__FollowingList_Selector) OrderBy_Name_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Name_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Name() *__FollowingList_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__FollowingList_Selector) OrderBy_Count_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Count DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_Count_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY Count ASC "
	return u
}

func (u *__FollowingList_Selector) Select_Count() *__FollowingList_Selector {
	u.selectCol = "Count"
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__FollowingList_Selector) Select_TRIAL_COLUMN6() *__FollowingList_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__FollowingList_Selector) Select_TRIAL_COLUMN7() *__FollowingList_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__FollowingList_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__FollowingList_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__FollowingList_Selector) Select_TRIAL_COLUMN8() *__FollowingList_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__FollowingList_Selector) Limit(num int) *__FollowingList_Selector {
	u.limit = num
	return u
}

func (u *__FollowingList_Selector) Offset(num int) *__FollowingList_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingList_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.following_list"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingList_Selector) GetRow(db *sqlx.DB) (*FollowingList, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingList{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__FollowingList_Selector) GetRows(db *sqlx.DB) ([]FollowingList, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingList
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingList_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingList_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingList_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.following_list SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingList_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.following_list WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingList ////////////////
func MassInsert_FollowingList(rows []FollowingList, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.following_list (" +
		"Id, ListType, Name, Count, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ID)
		vals = append(vals, row.Listtype)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingList(rows []FollowingList, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.following_list (" +
		"Id, ListType, Name, Count, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.ID)
		vals = append(vals, row.Listtype)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

// FollowingListMember represents a row from 'public.following_list_member'.

// Manualy copy this to project
type __FollowingListMember struct {
	Id             int `json:"Id"`             // Id -
	ListId         int `json:"ListId"`         // ListId -
	UserId         int `json:"UserId"`         // UserId -
	FollowedUserId int `json:"FollowedUserId"` // FollowedUserId -
	FollowType     int `json:"FollowType"`     // FollowType -
	TRIAL_COLUMN6  int `json:"TRIAL_COLUMN6"`  // TRIAL_COLUMN6 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingListMember exists in the database.
func (flm *FollowingListMember) Exists() bool {
	return flm._exists
}

// Deleted provides information if the FollowingListMember has been deleted from the database.
func (flm *FollowingListMember) Deleted() bool {
	return flm._deleted
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if flm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6)
	res, err := db.Exec(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flm.ID = int(id)
	flm._exists = true

	return nil
}

// Insert inserts the FollowingListMember to the database.
func (flm *FollowingListMember) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.following_list_member (` +
		`ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6)
	res, err := db.Exec(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flm.ID = int(id)
	flm._exists = true

	return nil
}

// Update updates the FollowingListMember in the database.
func (flm *FollowingListMember) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if flm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.following_list_member SET ` +
		`ListId = $1, UserId = $2, FollowedUserId = $3, FollowType = $4, TRIAL_COLUMN6 = $5` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6, flm.ID)
	_, err = db.Exec(sqlstr, flm.Listid, flm.Userid, flm.Followeduserid, flm.Followtype, flm.TrialColumn6, flm.ID)
	return err
}

// Save saves the FollowingListMember to the database.
func (flm *FollowingListMember) Save(db XODB) error {
	if flm.Exists() {
		return flm.Update(db)
	}

	return flm.Replace(db)
}

// Delete deletes the FollowingListMember from the database.
func (flm *FollowingListMember) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flm._exists {
		return nil
	}

	// if deleted, bail
	if flm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.following_list_member WHERE Id = ?`

	// run query
	XOLog(sqlstr, flm.ID)
	_, err = db.Exec(sqlstr, flm.ID)
	if err != nil {
		return err
	}

	// set deleted
	flm._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingListMember_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingListMember_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingListMember_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingListMember_Deleter() *__FollowingListMember_Deleter {
	d := __FollowingListMember_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingListMember_Updater() *__FollowingListMember_Updater {
	u := __FollowingListMember_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingListMember_Selector() *__FollowingListMember_Selector {
	u := __FollowingListMember_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingListMember_Deleter) Or() *__FollowingListMember_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Deleter) Id_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) Id_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) Id_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) Id_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) ListId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) ListId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) ListId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) ListId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) UserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) UserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) UserId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) UserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowedUserId_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowedUserId_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowedUserId_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) FollowType_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) FollowType_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) FollowType_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) FollowType_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Deleter) TRIAL_COLUMN6_In(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_EQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_LT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_LE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_GT(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Deleter) TRIAL_COLUMN6_GE(val int) *__FollowingListMember_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Updater) Or() *__FollowingListMember_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Updater) Id_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) Id_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) Id_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) Id_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) ListId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) ListId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) ListId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) ListId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) UserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) UserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) UserId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) UserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowedUserId_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowedUserId_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowedUserId_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) FollowType_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) FollowType_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) FollowType_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) FollowType_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Updater) TRIAL_COLUMN6_In(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_EQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_LT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_LE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_GT(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Updater) TRIAL_COLUMN6_GE(val int) *__FollowingListMember_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMember_Selector) Or() *__FollowingListMember_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMember_Selector) Id_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) Id_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) Id_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) Id_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) ListId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) ListId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) ListId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) ListId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) UserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) UserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) UserId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) UserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowedUserId_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowedUserId_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowedUserId_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowedUserId_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) FollowType_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) FollowType_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) FollowType_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) FollowType_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMember_Selector) TRIAL_COLUMN6_In(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMember_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_EQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_LT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_LE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_GT(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMember_Selector) TRIAL_COLUMN6_GE(val int) *__FollowingListMember_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingListMember_Updater) Id(newVal int) *__FollowingListMember_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) Id_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) ListId(newVal int) *__FollowingListMember_Updater {
	u.updates[" ListId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) ListId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" ListId = ListId+? "] = count
	}

	if count < 0 {
		u.updates[" ListId = ListId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) UserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) UserId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowedUserId(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowedUserId = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) FollowedUserId_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" FollowedUserId = FollowedUserId+? "] = count
	}

	if count < 0 {
		u.updates[" FollowedUserId = FollowedUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) FollowType(newVal int) *__FollowingListMember_Updater {
	u.updates[" FollowType = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) FollowType_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" FollowType = FollowType+? "] = count
	}

	if count < 0 {
		u.updates[" FollowType = FollowType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMember_Updater) TRIAL_COLUMN6(newVal int) *__FollowingListMember_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__FollowingListMember_Updater) TRIAL_COLUMN6_Increment(count int) *__FollowingListMember_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingListMember_Selector) OrderBy_Id_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_Id_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_Id() *__FollowingListMember_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_ListId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY ListId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_ListId() *__FollowingListMember_Selector {
	u.selectCol = "ListId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_UserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_UserId() *__FollowingListMember_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowedUserId_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowedUserId ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowedUserId() *__FollowingListMember_Selector {
	u.selectCol = "FollowedUserId"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_FollowType_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY FollowType ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_FollowType() *__FollowingListMember_Selector {
	u.selectCol = "FollowType"
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__FollowingListMember_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__FollowingListMember_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__FollowingListMember_Selector) Select_TRIAL_COLUMN6() *__FollowingListMember_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__FollowingListMember_Selector) Limit(num int) *__FollowingListMember_Selector {
	u.limit = num
	return u
}

func (u *__FollowingListMember_Selector) Offset(num int) *__FollowingListMember_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingListMember_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.following_list_member"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingListMember_Selector) GetRow(db *sqlx.DB) (*FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingListMember{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__FollowingListMember_Selector) GetRows(db *sqlx.DB) ([]FollowingListMember, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingListMember
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingListMember_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMember_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingListMember_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.following_list_member SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingListMember_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.following_list_member WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingListMember ////////////////
func MassInsert_FollowingListMember(rows []FollowingListMember, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Listid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Followeduserid)
		vals = append(vals, row.Followtype)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingListMember(rows []FollowingListMember, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.following_list_member (" +
		"ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Listid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Followeduserid)
		vals = append(vals, row.Followtype)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// FollowingListMemberHistory represents a row from 'public.following_list_member_history'.

// Manualy copy this to project
type __FollowingListMemberHistory struct {
	Id             int `json:"Id"`             // Id -
	ListId         int `json:"ListId"`         // ListId -
	UserId         int `json:"UserId"`         // UserId -
	FollowedUserId int `json:"FollowedUserId"` // FollowedUserId -
	FollowType     int `json:"FollowType"`     // FollowType -
	TRIAL_COLUMN6  int `json:"TRIAL_COLUMN6"`  // TRIAL_COLUMN6 -
	TRIAL_COLUMN7  int `json:"TRIAL_COLUMN7"`  // TRIAL_COLUMN7 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FollowingListMemberHistory exists in the database.
func (flmh *FollowingListMemberHistory) Exists() bool {
	return flmh._exists
}

// Deleted provides information if the FollowingListMemberHistory has been deleted from the database.
func (flmh *FollowingListMemberHistory) Deleted() bool {
	return flmh._deleted
}

// Insert inserts the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if flmh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.following_list_member_history (` +
		`ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7)
	res, err := db.Exec(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flmh.ID = int(id)
	flmh._exists = true

	return nil
}

// Insert inserts the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.following_list_member_history (` +
		`ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7)
	res, err := db.Exec(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	flmh.ID = int(id)
	flmh._exists = true

	return nil
}

// Update updates the FollowingListMemberHistory in the database.
func (flmh *FollowingListMemberHistory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flmh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if flmh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.following_list_member_history SET ` +
		`ListId = $1, UserId = $2, FollowedUserId = $3, FollowType = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7, flmh.ID)
	_, err = db.Exec(sqlstr, flmh.Listid, flmh.Userid, flmh.Followeduserid, flmh.Followtype, flmh.TrialColumn6, flmh.TrialColumn7, flmh.ID)
	return err
}

// Save saves the FollowingListMemberHistory to the database.
func (flmh *FollowingListMemberHistory) Save(db XODB) error {
	if flmh.Exists() {
		return flmh.Update(db)
	}

	return flmh.Replace(db)
}

// Delete deletes the FollowingListMemberHistory from the database.
func (flmh *FollowingListMemberHistory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !flmh._exists {
		return nil
	}

	// if deleted, bail
	if flmh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.following_list_member_history WHERE Id = ?`

	// run query
	XOLog(sqlstr, flmh.ID)
	_, err = db.Exec(sqlstr, flmh.ID)
	if err != nil {
		return err
	}

	// set deleted
	flmh._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __FollowingListMemberHistory_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __FollowingListMemberHistory_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __FollowingListMemberHistory_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewFollowingListMemberHistory_Deleter() *__FollowingListMemberHistory_Deleter {
	d := __FollowingListMemberHistory_Deleter{whereSep: " AND "}
	return &d
}

func NewFollowingListMemberHistory_Updater() *__FollowingListMemberHistory_Updater {
	u := __FollowingListMemberHistory_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewFollowingListMemberHistory_Selector() *__FollowingListMemberHistory_Selector {
	u := __FollowingListMemberHistory_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__FollowingListMemberHistory_Deleter) Or() *__FollowingListMemberHistory_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Deleter) Id_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) Id_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) Id_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) Id_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) ListId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) ListId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) ListId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) UserId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) UserId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) UserId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) FollowType_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) FollowType_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN6_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_In(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_EQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_LT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_LE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_GT(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Deleter) TRIAL_COLUMN7_GE(val int) *__FollowingListMemberHistory_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMemberHistory_Updater) Or() *__FollowingListMemberHistory_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Updater) Id_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) Id_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) Id_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) Id_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) ListId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) ListId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) ListId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) UserId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) UserId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) UserId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) FollowType_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) FollowType_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) FollowType_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_In(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_EQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_NotEQ(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_LT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_LE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_GT(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_GE(val int) *__FollowingListMemberHistory_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__FollowingListMemberHistory_Selector) Or() *__FollowingListMemberHistory_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Id_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) Id_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) Id_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) Id_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) ListId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) ListId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ListId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) ListId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) ListId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ListId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) UserId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) UserId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) UserId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) UserId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) FollowedUserId_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) FollowedUserId_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowedUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowedUserId_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowedUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) FollowType_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) FollowType_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FollowType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) FollowType_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) FollowType_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FollowType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN6_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_In(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_EQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_NotEQ(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_LT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_LE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_GT(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__FollowingListMemberHistory_Selector) TRIAL_COLUMN7_GE(val int) *__FollowingListMemberHistory_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__FollowingListMemberHistory_Updater) Id(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) Id_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) ListId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" ListId = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) ListId_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" ListId = ListId+? "] = count
	}

	if count < 0 {
		u.updates[" ListId = ListId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) UserId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) UserId_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) FollowedUserId(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" FollowedUserId = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowedUserId_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" FollowedUserId = FollowedUserId+? "] = count
	}

	if count < 0 {
		u.updates[" FollowedUserId = FollowedUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) FollowType(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" FollowType = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) FollowType_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" FollowType = FollowType+? "] = count
	}

	if count < 0 {
		u.updates[" FollowType = FollowType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN6_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7(newVal int) *__FollowingListMemberHistory_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__FollowingListMemberHistory_Updater) TRIAL_COLUMN7_Increment(count int) *__FollowingListMemberHistory_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__FollowingListMemberHistory_Selector) OrderBy_Id_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_Id_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_Id() *__FollowingListMemberHistory_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_ListId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY ListId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_ListId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY ListId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_ListId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "ListId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UserId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_UserId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_UserId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowedUserId_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowedUserId DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowedUserId_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowedUserId ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_FollowedUserId() *__FollowingListMemberHistory_Selector {
	u.selectCol = "FollowedUserId"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowType_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowType DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_FollowType_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY FollowType ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_FollowType() *__FollowingListMemberHistory_Selector {
	u.selectCol = "FollowType"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_TRIAL_COLUMN6() *__FollowingListMemberHistory_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__FollowingListMemberHistory_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__FollowingListMemberHistory_Selector) Select_TRIAL_COLUMN7() *__FollowingListMemberHistory_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__FollowingListMemberHistory_Selector) Limit(num int) *__FollowingListMemberHistory_Selector {
	u.limit = num
	return u
}

func (u *__FollowingListMemberHistory_Selector) Offset(num int) *__FollowingListMemberHistory_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__FollowingListMemberHistory_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.following_list_member_history"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__FollowingListMemberHistory_Selector) GetRow(db *sqlx.DB) (*FollowingListMemberHistory, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &FollowingListMemberHistory{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__FollowingListMemberHistory_Selector) GetRows(db *sqlx.DB) ([]FollowingListMemberHistory, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []FollowingListMemberHistory
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__FollowingListMemberHistory_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__FollowingListMemberHistory_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__FollowingListMemberHistory_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.following_list_member_history SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__FollowingListMemberHistory_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.following_list_member_history WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  FollowingListMemberHistory ////////////////
func MassInsert_FollowingListMemberHistory(rows []FollowingListMemberHistory, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.following_list_member_history (" +
		"ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Listid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Followeduserid)
		vals = append(vals, row.Followtype)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_FollowingListMemberHistory(rows []FollowingListMemberHistory, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.following_list_member_history (" +
		"ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Listid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Followeduserid)
		vals = append(vals, row.Followtype)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// Like represents a row from 'public.likes'.

// Manualy copy this to project
type __Like struct {
	Id          int `json:"Id"`          // Id -
	PostId      int `json:"PostId"`      // PostId -
	UserId      int `json:"UserId"`      // UserId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Like exists in the database.
func (l *Like) Exists() bool {
	return l._exists
}

// Deleted provides information if the Like has been deleted from the database.
func (l *Like) Deleted() bool {
	return l._deleted
}

// Insert inserts the Like to the database.
func (l *Like) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.likes (` +
		`PostId, UserId, TypeId, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime)
	res, err := db.Exec(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.ID = int(id)
	l._exists = true

	return nil
}

// Insert inserts the Like to the database.
func (l *Like) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.likes (` +
		`PostId, UserId, TypeId, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime)
	res, err := db.Exec(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.ID = int(id)
	l._exists = true

	return nil
}

// Update updates the Like in the database.
func (l *Like) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.likes SET ` +
		`PostId = $1, UserId = $2, TypeId = $3, CreatedTime = $4` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime, l.ID)
	_, err = db.Exec(sqlstr, l.Postid, l.Userid, l.Typeid, l.Createdtime, l.ID)
	return err
}

// Save saves the Like to the database.
func (l *Like) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Replace(db)
}

// Delete deletes the Like from the database.
func (l *Like) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.likes WHERE Id = ?`

	// run query
	XOLog(sqlstr, l.ID)
	_, err = db.Exec(sqlstr, l.ID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Like_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Like_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Like_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewLike_Deleter() *__Like_Deleter {
	d := __Like_Deleter{whereSep: " AND "}
	return &d
}

func NewLike_Updater() *__Like_Updater {
	u := __Like_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewLike_Selector() *__Like_Selector {
	u := __Like_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Like_Deleter) Or() *__Like_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Deleter) Id_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) Id_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) Id_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) Id_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) PostId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) PostId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) PostId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) PostId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) UserId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) UserId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) UserId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) UserId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) TypeId_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) TypeId_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) TypeId_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) TypeId_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Deleter) CreatedTime_In(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Deleter) CreatedTime_NotIn(ins []int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Deleter) CreatedTime_EQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_NotEQ(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_LT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_LE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_GT(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Deleter) CreatedTime_GE(val int) *__Like_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Like_Updater) Or() *__Like_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Updater) Id_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) Id_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) Id_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) Id_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) PostId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) PostId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) PostId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) PostId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) UserId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) UserId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) UserId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) UserId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) TypeId_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) TypeId_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) TypeId_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) TypeId_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Updater) CreatedTime_In(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Updater) CreatedTime_NotIn(ins []int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Updater) CreatedTime_EQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_NotEQ(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_LT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_LE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_GT(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Updater) CreatedTime_GE(val int) *__Like_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Like_Selector) Or() *__Like_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Like_Selector) Id_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) Id_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) Id_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) Id_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) PostId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) PostId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) PostId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) PostId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) UserId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) UserId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) UserId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) UserId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) TypeId_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) TypeId_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) TypeId_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) TypeId_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Like_Selector) CreatedTime_In(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Like_Selector) CreatedTime_NotIn(ins []int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Like_Selector) CreatedTime_EQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_NotEQ(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_LT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_LE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_GT(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Like_Selector) CreatedTime_GE(val int) *__Like_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Like_Updater) Id(newVal int) *__Like_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Like_Updater) Id_Increment(count int) *__Like_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Like_Updater) PostId(newVal int) *__Like_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Like_Updater) PostId_Increment(count int) *__Like_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Like_Updater) UserId(newVal int) *__Like_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Like_Updater) UserId_Increment(count int) *__Like_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Like_Updater) TypeId(newVal int) *__Like_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__Like_Updater) TypeId_Increment(count int) *__Like_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Like_Updater) CreatedTime(newVal int) *__Like_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Like_Updater) CreatedTime_Increment(count int) *__Like_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Like_Selector) OrderBy_Id_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Like_Selector) OrderBy_Id_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Like_Selector) Select_Id() *__Like_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Like_Selector) OrderBy_PostId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_PostId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Like_Selector) Select_PostId() *__Like_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Like_Selector) OrderBy_UserId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_UserId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Like_Selector) Select_UserId() *__Like_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Like_Selector) OrderBy_TypeId_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Like_Selector) OrderBy_TypeId_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Like_Selector) Select_TypeId() *__Like_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Like_Selector) OrderBy_CreatedTime_Desc() *__Like_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Like_Selector) OrderBy_CreatedTime_Asc() *__Like_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Like_Selector) Select_CreatedTime() *__Like_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Like_Selector) Limit(num int) *__Like_Selector {
	u.limit = num
	return u
}

func (u *__Like_Selector) Offset(num int) *__Like_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Like_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.likes"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Like_Selector) GetRow(db *sqlx.DB) (*Like, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Like{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Like_Selector) GetRows(db *sqlx.DB) ([]Like, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Like
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Like_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Like_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Like_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Like_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Like_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.likes SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Like_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.likes WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Like ////////////////
func MassInsert_Like(rows []Like, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.likes (" +
		"PostId, UserId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Like(rows []Like, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.likes (" +
		"PostId, UserId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// Media represents a row from 'public.media'.

// Manualy copy this to project
type __Media struct {
	Id            int    `json:"Id"`            // Id -
	UserId        int    `json:"UserId"`        // UserId -
	PostId        int    `json:"PostId"`        // PostId -
	AlbumId       int    `json:"AlbumId"`       // AlbumId -
	TypeId        int    `json:"TypeId"`        // TypeId -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -
	TRIAL_COLUMN7 string `json:"TRIAL_COLUMN7"` // TRIAL_COLUMN7 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Media exists in the database.
func (m *Media) Exists() bool {
	return m._exists
}

// Deleted provides information if the Media has been deleted from the database.
func (m *Media) Deleted() bool {
	return m._deleted
}

// Insert inserts the Media to the database.
func (m *Media) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.media (` +
		`UserId, PostId, AlbumId, TypeId, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7)
	res, err := db.Exec(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Insert inserts the Media to the database.
func (m *Media) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.media (` +
		`UserId, PostId, AlbumId, TypeId, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7)
	res, err := db.Exec(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Update updates the Media in the database.
func (m *Media) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.media SET ` +
		`UserId = $1, PostId = $2, AlbumId = $3, TypeId = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7, m.ID)
	_, err = db.Exec(sqlstr, m.Userid, m.Postid, m.Albumid, m.Typeid, m.TrialColumn6, m.TrialColumn7, m.ID)
	return err
}

// Save saves the Media to the database.
func (m *Media) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Replace(db)
}

// Delete deletes the Media from the database.
func (m *Media) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.media WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Media_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Media_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Media_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMedia_Deleter() *__Media_Deleter {
	d := __Media_Deleter{whereSep: " AND "}
	return &d
}

func NewMedia_Updater() *__Media_Updater {
	u := __Media_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMedia_Selector() *__Media_Selector {
	u := __Media_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Media_Deleter) Or() *__Media_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Deleter) Id_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) Id_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) Id_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) Id_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) UserId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) UserId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) UserId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) UserId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) PostId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) PostId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) PostId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) PostId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) AlbumId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) AlbumId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) AlbumId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) AlbumId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) TypeId_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) TypeId_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) TypeId_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TypeId_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Deleter) TRIAL_COLUMN6_In(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) TRIAL_COLUMN6_EQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TRIAL_COLUMN6_LT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TRIAL_COLUMN6_LE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TRIAL_COLUMN6_GT(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Deleter) TRIAL_COLUMN6_GE(val int) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Media_Updater) Or() *__Media_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Updater) Id_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) Id_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) Id_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) Id_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) UserId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) UserId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) UserId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) UserId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) PostId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) PostId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) PostId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) PostId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) AlbumId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) AlbumId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) AlbumId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) AlbumId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) TypeId_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) TypeId_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) TypeId_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TypeId_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Updater) TRIAL_COLUMN6_In(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) TRIAL_COLUMN6_EQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TRIAL_COLUMN6_NotEQ(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TRIAL_COLUMN6_LT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TRIAL_COLUMN6_LE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TRIAL_COLUMN6_GT(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Updater) TRIAL_COLUMN6_GE(val int) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Media_Selector) Or() *__Media_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Media_Selector) Id_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) Id_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) Id_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) Id_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) UserId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) UserId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) UserId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) UserId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) PostId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) PostId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) PostId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) PostId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) AlbumId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) AlbumId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " AlbumId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) AlbumId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) AlbumId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " AlbumId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) TypeId_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) TypeId_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) TypeId_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TypeId_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Media_Selector) TRIAL_COLUMN6_In(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) TRIAL_COLUMN6_EQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TRIAL_COLUMN6_NotEQ(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TRIAL_COLUMN6_LT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TRIAL_COLUMN6_LE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TRIAL_COLUMN6_GT(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Media_Selector) TRIAL_COLUMN6_GE(val int) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Media_Deleter) TRIAL_COLUMN7_In(ins []string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Deleter) TRIAL_COLUMN7_NotIn(ins []string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Deleter) TRIAL_COLUMN7_Like(val string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Deleter) TRIAL_COLUMN7_EQ(val string) *__Media_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Media_Updater) TRIAL_COLUMN7_In(ins []string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Updater) TRIAL_COLUMN7_NotIn(ins []string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Updater) TRIAL_COLUMN7_Like(val string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Updater) TRIAL_COLUMN7_EQ(val string) *__Media_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Media_Selector) TRIAL_COLUMN7_In(ins []string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Media_Selector) TRIAL_COLUMN7_NotIn(ins []string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Media_Selector) TRIAL_COLUMN7_Like(val string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Media_Selector) TRIAL_COLUMN7_EQ(val string) *__Media_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Media_Updater) Id(newVal int) *__Media_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Media_Updater) Id_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Media_Updater) UserId(newVal int) *__Media_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Media_Updater) UserId_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Media_Updater) PostId(newVal int) *__Media_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__Media_Updater) PostId_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Media_Updater) AlbumId(newVal int) *__Media_Updater {
	u.updates[" AlbumId = ? "] = newVal
	return u
}

func (u *__Media_Updater) AlbumId_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" AlbumId = AlbumId+? "] = count
	}

	if count < 0 {
		u.updates[" AlbumId = AlbumId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Media_Updater) TypeId(newVal int) *__Media_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__Media_Updater) TypeId_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Media_Updater) TRIAL_COLUMN6(newVal int) *__Media_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__Media_Updater) TRIAL_COLUMN6_Increment(count int) *__Media_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Media_Updater) TRIAL_COLUMN7(newVal string) *__Media_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Media_Selector) OrderBy_Id_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Media_Selector) OrderBy_Id_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Media_Selector) Select_Id() *__Media_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Media_Selector) OrderBy_UserId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_UserId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Media_Selector) Select_UserId() *__Media_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Media_Selector) OrderBy_PostId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_PostId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__Media_Selector) Select_PostId() *__Media_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__Media_Selector) OrderBy_AlbumId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY AlbumId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_AlbumId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY AlbumId ASC "
	return u
}

func (u *__Media_Selector) Select_AlbumId() *__Media_Selector {
	u.selectCol = "AlbumId"
	return u
}

func (u *__Media_Selector) OrderBy_TypeId_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Media_Selector) OrderBy_TypeId_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Media_Selector) Select_TypeId() *__Media_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Media_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__Media_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__Media_Selector) Select_TRIAL_COLUMN6() *__Media_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__Media_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__Media_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__Media_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__Media_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__Media_Selector) Select_TRIAL_COLUMN7() *__Media_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__Media_Selector) Limit(num int) *__Media_Selector {
	u.limit = num
	return u
}

func (u *__Media_Selector) Offset(num int) *__Media_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Media_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.media"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Media_Selector) GetRow(db *sqlx.DB) (*Media, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Media{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Media_Selector) GetRows(db *sqlx.DB) ([]Media, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Media
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Media_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Media_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Media_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Media_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Media_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.media SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Media_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.media WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Media ////////////////
func MassInsert_Media(rows []Media, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.media (" +
		"UserId, PostId, AlbumId, TypeId, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Albumid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Media(rows []Media, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.media (" +
		"UserId, PostId, AlbumId, TypeId, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Albumid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// Message represents a row from 'public.message'.

// Manualy copy this to project
type __Message struct {
	Id            int    `json:"Id"`            // Id -
	ToUserId      int    `json:"ToUserId"`      // ToUserId -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	MessageKey    string `json:"MessageKey"`    // MessageKey -
	FromUserID    int    `json:"FromUserID"`    // FromUserID -
	TRIAL_COLUMN6 string `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -
	TRIAL_COLUMN7 int    `json:"TRIAL_COLUMN7"` // TRIAL_COLUMN7 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.message (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7)
	res, err := db.Exec(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Insert inserts the Message to the database.
func (m *Message) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.message (` +
		`ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7)
	res, err := db.Exec(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.message SET ` +
		`ToUserId = $1, RoomKey = $2, MessageKey = $3, FromUserID = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7, m.ID)
	_, err = db.Exec(sqlstr, m.Touserid, m.Roomkey, m.Messagekey, m.Fromuserid, m.TrialColumn6, m.TrialColumn7, m.ID)
	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Replace(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.message WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Message_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Message_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Message_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMessage_Deleter() *__Message_Deleter {
	d := __Message_Deleter{whereSep: " AND "}
	return &d
}

func NewMessage_Updater() *__Message_Updater {
	u := __Message_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMessage_Selector() *__Message_Selector {
	u := __Message_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Message_Deleter) Or() *__Message_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Deleter) Id_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) Id_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) Id_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) Id_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) ToUserId_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) ToUserId_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) ToUserId_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) ToUserId_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) FromUserID_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) FromUserID_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) FromUserID_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) FromUserID_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) TRIAL_COLUMN7_In(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) TRIAL_COLUMN7_EQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TRIAL_COLUMN7_LT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TRIAL_COLUMN7_LE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TRIAL_COLUMN7_GT(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Deleter) TRIAL_COLUMN7_GE(val int) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Updater) Or() *__Message_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Updater) Id_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) Id_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) Id_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) Id_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) ToUserId_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) ToUserId_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) ToUserId_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) ToUserId_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) FromUserID_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) FromUserID_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) FromUserID_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) FromUserID_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) TRIAL_COLUMN7_In(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) TRIAL_COLUMN7_EQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TRIAL_COLUMN7_NotEQ(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TRIAL_COLUMN7_LT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TRIAL_COLUMN7_LE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TRIAL_COLUMN7_GT(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Updater) TRIAL_COLUMN7_GE(val int) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Message_Selector) Or() *__Message_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Message_Selector) Id_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) Id_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) Id_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) Id_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) ToUserId_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) ToUserId_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) ToUserId_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) ToUserId_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) FromUserID_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) FromUserID_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FromUserID NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) FromUserID_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) FromUserID_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FromUserID >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) TRIAL_COLUMN7_In(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) TRIAL_COLUMN7_EQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TRIAL_COLUMN7_NotEQ(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TRIAL_COLUMN7_LT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TRIAL_COLUMN7_LE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TRIAL_COLUMN7_GT(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Message_Selector) TRIAL_COLUMN7_GE(val int) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Message_Deleter) RoomKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) RoomKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) RoomKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) RoomKey_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) MessageKey_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) MessageKey_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) MessageKey_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) MessageKey_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Deleter) TRIAL_COLUMN6_In(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Deleter) TRIAL_COLUMN6_NotIn(ins []string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Deleter) TRIAL_COLUMN6_Like(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Deleter) TRIAL_COLUMN6_EQ(val string) *__Message_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Updater) RoomKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) RoomKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) RoomKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) RoomKey_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) MessageKey_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) MessageKey_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) MessageKey_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) MessageKey_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Updater) TRIAL_COLUMN6_In(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Updater) TRIAL_COLUMN6_NotIn(ins []string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Updater) TRIAL_COLUMN6_Like(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Updater) TRIAL_COLUMN6_EQ(val string) *__Message_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Message_Selector) RoomKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) RoomKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) RoomKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) RoomKey_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) MessageKey_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) MessageKey_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MessageKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) MessageKey_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) MessageKey_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MessageKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Message_Selector) TRIAL_COLUMN6_In(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Message_Selector) TRIAL_COLUMN6_NotIn(ins []string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Message_Selector) TRIAL_COLUMN6_Like(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Message_Selector) TRIAL_COLUMN6_EQ(val string) *__Message_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Message_Updater) Id(newVal int) *__Message_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Message_Updater) Id_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Message_Updater) ToUserId(newVal int) *__Message_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__Message_Updater) ToUserId_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Message_Updater) RoomKey(newVal string) *__Message_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__Message_Updater) MessageKey(newVal string) *__Message_Updater {
	u.updates[" MessageKey = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) FromUserID(newVal int) *__Message_Updater {
	u.updates[" FromUserID = ? "] = newVal
	return u
}

func (u *__Message_Updater) FromUserID_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" FromUserID = FromUserID+? "] = count
	}

	if count < 0 {
		u.updates[" FromUserID = FromUserID-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Message_Updater) TRIAL_COLUMN6(newVal string) *__Message_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

//ints

func (u *__Message_Updater) TRIAL_COLUMN7(newVal int) *__Message_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__Message_Updater) TRIAL_COLUMN7_Increment(count int) *__Message_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Message_Selector) OrderBy_Id_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Message_Selector) OrderBy_Id_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Message_Selector) Select_Id() *__Message_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Message_Selector) OrderBy_ToUserId_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__Message_Selector) OrderBy_ToUserId_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__Message_Selector) Select_ToUserId() *__Message_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_RoomKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__Message_Selector) Select_RoomKey() *__Message_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey DESC "
	return u
}

func (u *__Message_Selector) OrderBy_MessageKey_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY MessageKey ASC "
	return u
}

func (u *__Message_Selector) Select_MessageKey() *__Message_Selector {
	u.selectCol = "MessageKey"
	return u
}

func (u *__Message_Selector) OrderBy_FromUserID_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY FromUserID DESC "
	return u
}

func (u *__Message_Selector) OrderBy_FromUserID_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY FromUserID ASC "
	return u
}

func (u *__Message_Selector) Select_FromUserID() *__Message_Selector {
	u.selectCol = "FromUserID"
	return u
}

func (u *__Message_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__Message_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__Message_Selector) Select_TRIAL_COLUMN6() *__Message_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__Message_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__Message_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__Message_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__Message_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__Message_Selector) Select_TRIAL_COLUMN7() *__Message_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__Message_Selector) Limit(num int) *__Message_Selector {
	u.limit = num
	return u
}

func (u *__Message_Selector) Offset(num int) *__Message_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Message_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.message"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Message_Selector) GetRow(db *sqlx.DB) (*Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Message{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Message_Selector) GetRows(db *sqlx.DB) ([]Message, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Message
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Message_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Message_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Message_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Message_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.message SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Message_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.message WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Message ////////////////
func MassInsert_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.message (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Messagekey)
		vals = append(vals, row.Fromuserid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Message(rows []Message, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.message (" +
		"ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Messagekey)
		vals = append(vals, row.Fromuserid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

// MsgDeletedFromServer represents a row from 'public.msg_deleted_from_server'.

// Manualy copy this to project
type __MsgDeletedFromServer struct {
	Id            int    `json:"Id"`            // Id -
	ToUserId      int    `json:"ToUserId"`      // ToUserId -
	MsgKey        string `json:"MsgKey"`        // MsgKey -
	PeerUserId    int    `json:"PeerUserId"`    // PeerUserId -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgDeletedFromServer exists in the database.
func (mdfs *MsgDeletedFromServer) Exists() bool {
	return mdfs._exists
}

// Deleted provides information if the MsgDeletedFromServer has been deleted from the database.
func (mdfs *MsgDeletedFromServer) Deleted() bool {
	return mdfs._deleted
}

// Insert inserts the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mdfs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.msg_deleted_from_server (` +
		`ToUserId, MsgKey, PeerUserId, RoomKey, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6)
	res, err := db.Exec(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mdfs.ID = int(id)
	mdfs._exists = true

	return nil
}

// Insert inserts the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.msg_deleted_from_server (` +
		`ToUserId, MsgKey, PeerUserId, RoomKey, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6)
	res, err := db.Exec(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mdfs.ID = int(id)
	mdfs._exists = true

	return nil
}

// Update updates the MsgDeletedFromServer in the database.
func (mdfs *MsgDeletedFromServer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mdfs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mdfs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.msg_deleted_from_server SET ` +
		`ToUserId = $1, MsgKey = $2, PeerUserId = $3, RoomKey = $4, TRIAL_COLUMN6 = $5` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6, mdfs.ID)
	_, err = db.Exec(sqlstr, mdfs.Touserid, mdfs.Msgkey, mdfs.Peeruserid, mdfs.Roomkey, mdfs.TrialColumn6, mdfs.ID)
	return err
}

// Save saves the MsgDeletedFromServer to the database.
func (mdfs *MsgDeletedFromServer) Save(db XODB) error {
	if mdfs.Exists() {
		return mdfs.Update(db)
	}

	return mdfs.Replace(db)
}

// Delete deletes the MsgDeletedFromServer from the database.
func (mdfs *MsgDeletedFromServer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mdfs._exists {
		return nil
	}

	// if deleted, bail
	if mdfs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.msg_deleted_from_server WHERE Id = ?`

	// run query
	XOLog(sqlstr, mdfs.ID)
	_, err = db.Exec(sqlstr, mdfs.ID)
	if err != nil {
		return err
	}

	// set deleted
	mdfs._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgDeletedFromServer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgDeletedFromServer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgDeletedFromServer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgDeletedFromServer_Deleter() *__MsgDeletedFromServer_Deleter {
	d := __MsgDeletedFromServer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgDeletedFromServer_Updater() *__MsgDeletedFromServer_Updater {
	u := __MsgDeletedFromServer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgDeletedFromServer_Selector() *__MsgDeletedFromServer_Selector {
	u := __MsgDeletedFromServer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgDeletedFromServer_Deleter) Or() *__MsgDeletedFromServer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Deleter) Id_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) Id_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) Id_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) Id_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) ToUserId_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) ToUserId_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) PeerUserId_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_In(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_EQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_LT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_LE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_GT(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Deleter) TRIAL_COLUMN6_GE(val int) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgDeletedFromServer_Updater) Or() *__MsgDeletedFromServer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Updater) Id_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) Id_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) Id_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) Id_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) ToUserId_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) ToUserId_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) PeerUserId_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_In(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_EQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_NotEQ(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_LT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_LE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_GT(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_GE(val int) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgDeletedFromServer_Selector) Or() *__MsgDeletedFromServer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Id_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) Id_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) Id_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) Id_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) ToUserId_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) ToUserId_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) ToUserId_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) PeerUserId_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) PeerUserId_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) PeerUserId_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_In(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_EQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_NotEQ(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_LT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_LE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_GT(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgDeletedFromServer_Selector) TRIAL_COLUMN6_GE(val int) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgDeletedFromServer_Deleter) MsgKey_In(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Deleter) MsgKey_Like(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) MsgKey_EQ(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Deleter) RoomKey_In(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Deleter) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Deleter) RoomKey_Like(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Deleter) RoomKey_EQ(val string) *__MsgDeletedFromServer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgDeletedFromServer_Updater) MsgKey_In(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Updater) MsgKey_Like(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) MsgKey_EQ(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Updater) RoomKey_In(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Updater) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Updater) RoomKey_Like(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Updater) RoomKey_EQ(val string) *__MsgDeletedFromServer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgDeletedFromServer_Selector) MsgKey_In(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) MsgKey_NotIn(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Selector) MsgKey_Like(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) MsgKey_EQ(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgDeletedFromServer_Selector) RoomKey_In(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgDeletedFromServer_Selector) RoomKey_NotIn(ins []string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgDeletedFromServer_Selector) RoomKey_Like(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgDeletedFromServer_Selector) RoomKey_EQ(val string) *__MsgDeletedFromServer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgDeletedFromServer_Updater) Id(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgDeletedFromServer_Updater) Id_Increment(count int) *__MsgDeletedFromServer_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgDeletedFromServer_Updater) ToUserId(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__MsgDeletedFromServer_Updater) ToUserId_Increment(count int) *__MsgDeletedFromServer_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgDeletedFromServer_Updater) MsgKey(newVal string) *__MsgDeletedFromServer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgDeletedFromServer_Updater) PeerUserId(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__MsgDeletedFromServer_Updater) PeerUserId_Increment(count int) *__MsgDeletedFromServer_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgDeletedFromServer_Updater) RoomKey(newVal string) *__MsgDeletedFromServer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6(newVal int) *__MsgDeletedFromServer_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__MsgDeletedFromServer_Updater) TRIAL_COLUMN6_Increment(count int) *__MsgDeletedFromServer_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgDeletedFromServer_Selector) OrderBy_Id_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_Id_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_Id() *__MsgDeletedFromServer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_ToUserId_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_ToUserId_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_ToUserId() *__MsgDeletedFromServer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_MsgKey_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_MsgKey_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_MsgKey() *__MsgDeletedFromServer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_PeerUserId_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_PeerUserId_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_PeerUserId() *__MsgDeletedFromServer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_RoomKey_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_RoomKey_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_RoomKey() *__MsgDeletedFromServer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__MsgDeletedFromServer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__MsgDeletedFromServer_Selector) Select_TRIAL_COLUMN6() *__MsgDeletedFromServer_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__MsgDeletedFromServer_Selector) Limit(num int) *__MsgDeletedFromServer_Selector {
	u.limit = num
	return u
}

func (u *__MsgDeletedFromServer_Selector) Offset(num int) *__MsgDeletedFromServer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgDeletedFromServer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.msg_deleted_from_server"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgDeletedFromServer_Selector) GetRow(db *sqlx.DB) (*MsgDeletedFromServer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgDeletedFromServer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__MsgDeletedFromServer_Selector) GetRows(db *sqlx.DB) ([]MsgDeletedFromServer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgDeletedFromServer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgDeletedFromServer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgDeletedFromServer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgDeletedFromServer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.msg_deleted_from_server SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgDeletedFromServer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.msg_deleted_from_server WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgDeletedFromServer ////////////////
func MassInsert_MsgDeletedFromServer(rows []MsgDeletedFromServer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.msg_deleted_from_server (" +
		"ToUserId, MsgKey, PeerUserId, RoomKey, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgDeletedFromServer(rows []MsgDeletedFromServer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.msg_deleted_from_server (" +
		"ToUserId, MsgKey, PeerUserId, RoomKey, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// MsgReceivedToPeer represents a row from 'public.msg_received_to_peer'.

// Manualy copy this to project
type __MsgReceivedToPeer struct {
	Id            int    `json:"Id"`            // Id -
	ToUserId      int    `json:"ToUserId"`      // ToUserId -
	MsgKey        string `json:"MsgKey"`        // MsgKey -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	PeerUserId    int    `json:"PeerUserId"`    // PeerUserId -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgReceivedToPeer exists in the database.
func (mrtp *MsgReceivedToPeer) Exists() bool {
	return mrtp._exists
}

// Deleted provides information if the MsgReceivedToPeer has been deleted from the database.
func (mrtp *MsgReceivedToPeer) Deleted() bool {
	return mrtp._deleted
}

// Insert inserts the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mrtp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.msg_received_to_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6)
	res, err := db.Exec(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mrtp.ID = int(id)
	mrtp._exists = true

	return nil
}

// Insert inserts the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.msg_received_to_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6)
	res, err := db.Exec(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mrtp.ID = int(id)
	mrtp._exists = true

	return nil
}

// Update updates the MsgReceivedToPeer in the database.
func (mrtp *MsgReceivedToPeer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mrtp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mrtp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.msg_received_to_peer SET ` +
		`ToUserId = $1, MsgKey = $2, RoomKey = $3, PeerUserId = $4, TRIAL_COLUMN6 = $5` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6, mrtp.ID)
	_, err = db.Exec(sqlstr, mrtp.Touserid, mrtp.Msgkey, mrtp.Roomkey, mrtp.Peeruserid, mrtp.TrialColumn6, mrtp.ID)
	return err
}

// Save saves the MsgReceivedToPeer to the database.
func (mrtp *MsgReceivedToPeer) Save(db XODB) error {
	if mrtp.Exists() {
		return mrtp.Update(db)
	}

	return mrtp.Replace(db)
}

// Delete deletes the MsgReceivedToPeer from the database.
func (mrtp *MsgReceivedToPeer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mrtp._exists {
		return nil
	}

	// if deleted, bail
	if mrtp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.msg_received_to_peer WHERE Id = ?`

	// run query
	XOLog(sqlstr, mrtp.ID)
	_, err = db.Exec(sqlstr, mrtp.ID)
	if err != nil {
		return err
	}

	// set deleted
	mrtp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgReceivedToPeer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgReceivedToPeer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgReceivedToPeer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgReceivedToPeer_Deleter() *__MsgReceivedToPeer_Deleter {
	d := __MsgReceivedToPeer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgReceivedToPeer_Updater() *__MsgReceivedToPeer_Updater {
	u := __MsgReceivedToPeer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgReceivedToPeer_Selector() *__MsgReceivedToPeer_Selector {
	u := __MsgReceivedToPeer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgReceivedToPeer_Deleter) Or() *__MsgReceivedToPeer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Deleter) Id_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) Id_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) Id_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) Id_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) ToUserId_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) ToUserId_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) PeerUserId_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_In(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_EQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_LT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_LE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_GT(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Deleter) TRIAL_COLUMN6_GE(val int) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgReceivedToPeer_Updater) Or() *__MsgReceivedToPeer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Updater) Id_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) Id_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) Id_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) Id_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) ToUserId_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) ToUserId_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) PeerUserId_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_In(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_EQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_NotEQ(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_LT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_LE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_GT(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_GE(val int) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgReceivedToPeer_Selector) Or() *__MsgReceivedToPeer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Id_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) Id_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) Id_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) Id_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) ToUserId_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) ToUserId_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) ToUserId_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) PeerUserId_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) PeerUserId_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) PeerUserId_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_In(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_EQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_NotEQ(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_LT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_LE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_GT(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgReceivedToPeer_Selector) TRIAL_COLUMN6_GE(val int) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgReceivedToPeer_Deleter) MsgKey_In(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Deleter) MsgKey_Like(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) MsgKey_EQ(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Deleter) RoomKey_In(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Deleter) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Deleter) RoomKey_Like(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Deleter) RoomKey_EQ(val string) *__MsgReceivedToPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgReceivedToPeer_Updater) MsgKey_In(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Updater) MsgKey_Like(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) MsgKey_EQ(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Updater) RoomKey_In(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Updater) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Updater) RoomKey_Like(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Updater) RoomKey_EQ(val string) *__MsgReceivedToPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgReceivedToPeer_Selector) MsgKey_In(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) MsgKey_NotIn(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Selector) MsgKey_Like(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) MsgKey_EQ(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgReceivedToPeer_Selector) RoomKey_In(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgReceivedToPeer_Selector) RoomKey_NotIn(ins []string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgReceivedToPeer_Selector) RoomKey_Like(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgReceivedToPeer_Selector) RoomKey_EQ(val string) *__MsgReceivedToPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgReceivedToPeer_Updater) Id(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgReceivedToPeer_Updater) Id_Increment(count int) *__MsgReceivedToPeer_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgReceivedToPeer_Updater) ToUserId(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__MsgReceivedToPeer_Updater) ToUserId_Increment(count int) *__MsgReceivedToPeer_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgReceivedToPeer_Updater) MsgKey(newVal string) *__MsgReceivedToPeer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgReceivedToPeer_Updater) RoomKey(newVal string) *__MsgReceivedToPeer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgReceivedToPeer_Updater) PeerUserId(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__MsgReceivedToPeer_Updater) PeerUserId_Increment(count int) *__MsgReceivedToPeer_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6(newVal int) *__MsgReceivedToPeer_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__MsgReceivedToPeer_Updater) TRIAL_COLUMN6_Increment(count int) *__MsgReceivedToPeer_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgReceivedToPeer_Selector) OrderBy_Id_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_Id_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_Id() *__MsgReceivedToPeer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_ToUserId_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_ToUserId_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_ToUserId() *__MsgReceivedToPeer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_MsgKey_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_MsgKey_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_MsgKey() *__MsgReceivedToPeer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_RoomKey_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_RoomKey_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_RoomKey() *__MsgReceivedToPeer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_PeerUserId_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_PeerUserId_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_PeerUserId() *__MsgReceivedToPeer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__MsgReceivedToPeer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__MsgReceivedToPeer_Selector) Select_TRIAL_COLUMN6() *__MsgReceivedToPeer_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__MsgReceivedToPeer_Selector) Limit(num int) *__MsgReceivedToPeer_Selector {
	u.limit = num
	return u
}

func (u *__MsgReceivedToPeer_Selector) Offset(num int) *__MsgReceivedToPeer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgReceivedToPeer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.msg_received_to_peer"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgReceivedToPeer_Selector) GetRow(db *sqlx.DB) (*MsgReceivedToPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgReceivedToPeer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__MsgReceivedToPeer_Selector) GetRows(db *sqlx.DB) ([]MsgReceivedToPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgReceivedToPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgReceivedToPeer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgReceivedToPeer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgReceivedToPeer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.msg_received_to_peer SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgReceivedToPeer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.msg_received_to_peer WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgReceivedToPeer ////////////////
func MassInsert_MsgReceivedToPeer(rows []MsgReceivedToPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.msg_received_to_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgReceivedToPeer(rows []MsgReceivedToPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.msg_received_to_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// MsgSeenByPeer represents a row from 'public.msg_seen_by_peer'.

// Manualy copy this to project
type __MsgSeenByPeer struct {
	Id            int    `json:"Id"`            // Id -
	ToUserId      int    `json:"ToUserId"`      // ToUserId -
	MsgKey        string `json:"MsgKey"`        // MsgKey -
	RoomKey       string `json:"RoomKey"`       // RoomKey -
	PeerUserId    int    `json:"PeerUserId"`    // PeerUserId -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MsgSeenByPeer exists in the database.
func (msbp *MsgSeenByPeer) Exists() bool {
	return msbp._exists
}

// Deleted provides information if the MsgSeenByPeer has been deleted from the database.
func (msbp *MsgSeenByPeer) Deleted() bool {
	return msbp._deleted
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if msbp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6)
	res, err := db.Exec(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	msbp.ID = int(id)
	msbp._exists = true

	return nil
}

// Insert inserts the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.msg_seen_by_peer (` +
		`ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6)
	res, err := db.Exec(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	msbp.ID = int(id)
	msbp._exists = true

	return nil
}

// Update updates the MsgSeenByPeer in the database.
func (msbp *MsgSeenByPeer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if msbp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.msg_seen_by_peer SET ` +
		`ToUserId = $1, MsgKey = $2, RoomKey = $3, PeerUserId = $4, TRIAL_COLUMN6 = $5` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6, msbp.ID)
	_, err = db.Exec(sqlstr, msbp.Touserid, msbp.Msgkey, msbp.Roomkey, msbp.Peeruserid, msbp.TrialColumn6, msbp.ID)
	return err
}

// Save saves the MsgSeenByPeer to the database.
func (msbp *MsgSeenByPeer) Save(db XODB) error {
	if msbp.Exists() {
		return msbp.Update(db)
	}

	return msbp.Replace(db)
}

// Delete deletes the MsgSeenByPeer from the database.
func (msbp *MsgSeenByPeer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !msbp._exists {
		return nil
	}

	// if deleted, bail
	if msbp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.msg_seen_by_peer WHERE Id = ?`

	// run query
	XOLog(sqlstr, msbp.ID)
	_, err = db.Exec(sqlstr, msbp.ID)
	if err != nil {
		return err
	}

	// set deleted
	msbp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __MsgSeenByPeer_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __MsgSeenByPeer_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __MsgSeenByPeer_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewMsgSeenByPeer_Deleter() *__MsgSeenByPeer_Deleter {
	d := __MsgSeenByPeer_Deleter{whereSep: " AND "}
	return &d
}

func NewMsgSeenByPeer_Updater() *__MsgSeenByPeer_Updater {
	u := __MsgSeenByPeer_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewMsgSeenByPeer_Selector() *__MsgSeenByPeer_Selector {
	u := __MsgSeenByPeer_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__MsgSeenByPeer_Deleter) Or() *__MsgSeenByPeer_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) Id_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) Id_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) Id_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) ToUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) PeerUserId_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_In(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_EQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_LT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_LE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_GT(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Deleter) TRIAL_COLUMN6_GE(val int) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Updater) Or() *__MsgSeenByPeer_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Updater) Id_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) Id_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) Id_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) Id_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) ToUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) ToUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) ToUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) PeerUserId_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_In(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_EQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_NotEQ(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_LT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_LE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_GT(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_GE(val int) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__MsgSeenByPeer_Selector) Or() *__MsgSeenByPeer_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__MsgSeenByPeer_Selector) Id_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) Id_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) Id_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) Id_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) ToUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) ToUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ToUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) ToUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) ToUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ToUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) PeerUserId_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PeerUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) PeerUserId_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PeerUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_In(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_EQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_NotEQ(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_LT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_LE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_GT(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__MsgSeenByPeer_Selector) TRIAL_COLUMN6_GE(val int) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__MsgSeenByPeer_Deleter) MsgKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) MsgKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) MsgKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_In(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Deleter) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Deleter) RoomKey_Like(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Deleter) RoomKey_EQ(val string) *__MsgSeenByPeer_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Updater) MsgKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) MsgKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) MsgKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Updater) RoomKey_In(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Updater) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Updater) RoomKey_Like(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Updater) RoomKey_EQ(val string) *__MsgSeenByPeer_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__MsgSeenByPeer_Selector) MsgKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) MsgKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " MsgKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) MsgKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) MsgKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " MsgKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__MsgSeenByPeer_Selector) RoomKey_In(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__MsgSeenByPeer_Selector) RoomKey_NotIn(ins []string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " RoomKey NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__MsgSeenByPeer_Selector) RoomKey_Like(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__MsgSeenByPeer_Selector) RoomKey_EQ(val string) *__MsgSeenByPeer_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " RoomKey = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__MsgSeenByPeer_Updater) Id(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) Id_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) ToUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" ToUserId = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) ToUserId_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" ToUserId = ToUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ToUserId = ToUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__MsgSeenByPeer_Updater) MsgKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" MsgKey = ? "] = newVal
	return u
}

//ints

//string
func (u *__MsgSeenByPeer_Updater) RoomKey(newVal string) *__MsgSeenByPeer_Updater {
	u.updates[" RoomKey = ? "] = newVal
	return u
}

//ints

func (u *__MsgSeenByPeer_Updater) PeerUserId(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" PeerUserId = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) PeerUserId_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" PeerUserId = PeerUserId+? "] = count
	}

	if count < 0 {
		u.updates[" PeerUserId = PeerUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__MsgSeenByPeer_Updater) TRIAL_COLUMN6(newVal int) *__MsgSeenByPeer_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__MsgSeenByPeer_Updater) TRIAL_COLUMN6_Increment(count int) *__MsgSeenByPeer_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_Id_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_Id() *__MsgSeenByPeer_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_ToUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY ToUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_ToUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "ToUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_MsgKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY MsgKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_MsgKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "MsgKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_RoomKey_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY RoomKey ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_RoomKey() *__MsgSeenByPeer_Selector {
	u.selectCol = "RoomKey"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_PeerUserId_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY PeerUserId ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_PeerUserId() *__MsgSeenByPeer_Selector {
	u.selectCol = "PeerUserId"
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__MsgSeenByPeer_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__MsgSeenByPeer_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__MsgSeenByPeer_Selector) Select_TRIAL_COLUMN6() *__MsgSeenByPeer_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__MsgSeenByPeer_Selector) Limit(num int) *__MsgSeenByPeer_Selector {
	u.limit = num
	return u
}

func (u *__MsgSeenByPeer_Selector) Offset(num int) *__MsgSeenByPeer_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__MsgSeenByPeer_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.msg_seen_by_peer"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__MsgSeenByPeer_Selector) GetRow(db *sqlx.DB) (*MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &MsgSeenByPeer{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__MsgSeenByPeer_Selector) GetRows(db *sqlx.DB) ([]MsgSeenByPeer, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []MsgSeenByPeer
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__MsgSeenByPeer_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__MsgSeenByPeer_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__MsgSeenByPeer_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.msg_seen_by_peer SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__MsgSeenByPeer_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.msg_seen_by_peer WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  MsgSeenByPeer ////////////////
func MassInsert_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_MsgSeenByPeer(rows []MsgSeenByPeer, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.msg_seen_by_peer (" +
		"ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Touserid)
		vals = append(vals, row.Msgkey)
		vals = append(vals, row.Roomkey)
		vals = append(vals, row.Peeruserid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// Notification represents a row from 'public.notification'.

// Manualy copy this to project
type __Notification struct {
	Id            int `json:"Id"`            // Id -
	ForUserId     int `json:"ForUserId"`     // ForUserId -
	ActorUserId   int `json:"ActorUserId"`   // ActorUserId -
	ActionTypeId  int `json:"ActionTypeId"`  // ActionTypeId -
	ObjectTypeId  int `json:"ObjectTypeId"`  // ObjectTypeId -
	TRIAL_COLUMN6 int `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -
	TRIAL_COLUMN7 int `json:"TRIAL_COLUMN7"` // TRIAL_COLUMN7 -
	TRIAL_COLUMN8 int `json:"TRIAL_COLUMN8"` // TRIAL_COLUMN8 -
	TRIAL_COLUMN9 int `json:"TRIAL_COLUMN9"` // TRIAL_COLUMN9 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notification exists in the database.
func (n *Notification) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notification has been deleted from the database.
func (n *Notification) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notification to the database.
func (n *Notification) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9)
	res, err := db.Exec(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	n.ID = int(id)
	n._exists = true

	return nil
}

// Insert inserts the Notification to the database.
func (n *Notification) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.notification (` +
		`ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9)
	res, err := db.Exec(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	n.ID = int(id)
	n._exists = true

	return nil
}

// Update updates the Notification in the database.
func (n *Notification) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.notification SET ` +
		`ForUserId = $1, ActorUserId = $2, ActionTypeId = $3, ObjectTypeId = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7, TRIAL_COLUMN9 = $8` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9, n.ID)
	_, err = db.Exec(sqlstr, n.Foruserid, n.Actoruserid, n.Actiontypeid, n.Objecttypeid, n.TrialColumn6, n.TrialColumn7, n.TrialColumn8, n.TrialColumn9, n.ID)
	return err
}

// Save saves the Notification to the database.
func (n *Notification) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Replace(db)
}

// Delete deletes the Notification from the database.
func (n *Notification) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.notification WHERE Id = ?`

	// run query
	XOLog(sqlstr, n.ID)
	_, err = db.Exec(sqlstr, n.ID)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Notification_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Notification_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Notification_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotification_Deleter() *__Notification_Deleter {
	d := __Notification_Deleter{whereSep: " AND "}
	return &d
}

func NewNotification_Updater() *__Notification_Updater {
	u := __Notification_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotification_Selector() *__Notification_Selector {
	u := __Notification_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Notification_Deleter) Or() *__Notification_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Deleter) Id_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) Id_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) Id_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) Id_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ForUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ForUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ForUserId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ForUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActorUserId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActorUserId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActorUserId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActorUserId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ActionTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ActionTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ActionTypeId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ActionTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) ObjectTypeId_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) ObjectTypeId_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) ObjectTypeId_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) ObjectTypeId_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) TRIAL_COLUMN6_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN6_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) TRIAL_COLUMN7_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN7_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) TRIAL_COLUMN8_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) TRIAL_COLUMN8_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN8_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Deleter) TRIAL_COLUMN9_In(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Deleter) TRIAL_COLUMN9_NotIn(ins []int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_EQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_NotEQ(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_LT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_LE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_GT(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Deleter) TRIAL_COLUMN9_GE(val int) *__Notification_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Updater) Or() *__Notification_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Updater) Id_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) Id_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) Id_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) Id_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ForUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ForUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ForUserId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ForUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActorUserId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActorUserId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActorUserId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActorUserId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ActionTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ActionTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ActionTypeId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ActionTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) ObjectTypeId_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) ObjectTypeId_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) ObjectTypeId_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) ObjectTypeId_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) TRIAL_COLUMN6_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) TRIAL_COLUMN6_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN6_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN6_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN6_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN6_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN6_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) TRIAL_COLUMN7_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) TRIAL_COLUMN7_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN7_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN7_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN7_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN7_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN7_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) TRIAL_COLUMN8_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN8_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) TRIAL_COLUMN8_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN8_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN8_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN8_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN8_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN8_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Updater) TRIAL_COLUMN9_In(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN9_NotIn(ins []int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Updater) TRIAL_COLUMN9_EQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN9_NotEQ(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN9_LT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN9_LE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN9_GT(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Updater) TRIAL_COLUMN9_GE(val int) *__Notification_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Notification_Selector) Or() *__Notification_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Notification_Selector) Id_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) Id_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) Id_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) Id_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ForUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ForUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ForUserId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ForUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActorUserId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActorUserId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActorUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActorUserId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActorUserId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActorUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ActionTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ActionTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ActionTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ActionTypeId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ActionTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ActionTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) ObjectTypeId_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) ObjectTypeId_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ObjectTypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) ObjectTypeId_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) ObjectTypeId_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ObjectTypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) TRIAL_COLUMN6_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) TRIAL_COLUMN6_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN6_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN6_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN6_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN6_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN6_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) TRIAL_COLUMN7_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) TRIAL_COLUMN7_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN7_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN7_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN7_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN7_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN7_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) TRIAL_COLUMN8_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) TRIAL_COLUMN8_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) TRIAL_COLUMN8_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN8_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN8_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN8_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN8_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN8_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Notification_Selector) TRIAL_COLUMN9_In(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Notification_Selector) TRIAL_COLUMN9_NotIn(ins []int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Notification_Selector) TRIAL_COLUMN9_EQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN9_NotEQ(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN9_LT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN9_LE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN9_GT(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Notification_Selector) TRIAL_COLUMN9_GE(val int) *__Notification_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Notification_Updater) Id(newVal int) *__Notification_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Notification_Updater) Id_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ForUserId(newVal int) *__Notification_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ForUserId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ActorUserId(newVal int) *__Notification_Updater {
	u.updates[" ActorUserId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ActorUserId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ActorUserId = ActorUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ActorUserId = ActorUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ActionTypeId(newVal int) *__Notification_Updater {
	u.updates[" ActionTypeId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ActionTypeId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ActionTypeId = ActionTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ActionTypeId = ActionTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) ObjectTypeId(newVal int) *__Notification_Updater {
	u.updates[" ObjectTypeId = ? "] = newVal
	return u
}

func (u *__Notification_Updater) ObjectTypeId_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" ObjectTypeId = ObjectTypeId+? "] = count
	}

	if count < 0 {
		u.updates[" ObjectTypeId = ObjectTypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) TRIAL_COLUMN6(newVal int) *__Notification_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN6_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) TRIAL_COLUMN7(newVal int) *__Notification_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN7_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) TRIAL_COLUMN8(newVal int) *__Notification_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN8_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Notification_Updater) TRIAL_COLUMN9(newVal int) *__Notification_Updater {
	u.updates[" TRIAL_COLUMN9 = ? "] = newVal
	return u
}

func (u *__Notification_Updater) TRIAL_COLUMN9_Increment(count int) *__Notification_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Notification_Selector) OrderBy_Id_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_Id_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Notification_Selector) Select_Id() *__Notification_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ForUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ForUserId() *__Notification_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActorUserId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActorUserId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActorUserId() *__Notification_Selector {
	u.selectCol = "ActorUserId"
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ActionTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ActionTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ActionTypeId() *__Notification_Selector {
	u.selectCol = "ActionTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_ObjectTypeId_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY ObjectTypeId ASC "
	return u
}

func (u *__Notification_Selector) Select_ObjectTypeId() *__Notification_Selector {
	u.selectCol = "ObjectTypeId"
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__Notification_Selector) Select_TRIAL_COLUMN6() *__Notification_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__Notification_Selector) Select_TRIAL_COLUMN7() *__Notification_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__Notification_Selector) Select_TRIAL_COLUMN8() *__Notification_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN9_Desc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 DESC "
	return u
}

func (u *__Notification_Selector) OrderBy_TRIAL_COLUMN9_Asc() *__Notification_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 ASC "
	return u
}

func (u *__Notification_Selector) Select_TRIAL_COLUMN9() *__Notification_Selector {
	u.selectCol = "TRIAL_COLUMN9"
	return u
}

func (u *__Notification_Selector) Limit(num int) *__Notification_Selector {
	u.limit = num
	return u
}

func (u *__Notification_Selector) Offset(num int) *__Notification_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Notification_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.notification"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Notification_Selector) GetRow(db *sqlx.DB) (*Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Notification{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Notification_Selector) GetRows(db *sqlx.DB) ([]Notification, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Notification
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Notification_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Notification_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Notification_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Notification_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.notification SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Notification_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.notification WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Notification ////////////////
func MassInsert_Notification(rows []Notification, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Foruserid)
		vals = append(vals, row.Actoruserid)
		vals = append(vals, row.Actiontypeid)
		vals = append(vals, row.Objecttypeid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Notification(rows []Notification, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.notification (" +
		"ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Foruserid)
		vals = append(vals, row.Actoruserid)
		vals = append(vals, row.Actiontypeid)
		vals = append(vals, row.Objecttypeid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

// NotificationRemoved represents a row from 'public.notification_removed'.

// Manualy copy this to project
type __NotificationRemoved struct {
	NotificationId int `json:"NotificationId"` // NotificationId -
	ForUserId      int `json:"ForUserId"`      // ForUserId -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the NotificationRemoved exists in the database.
func (nr *NotificationRemoved) Exists() bool {
	return nr._exists
}

// Deleted provides information if the NotificationRemoved has been deleted from the database.
func (nr *NotificationRemoved) Deleted() bool {
	return nr._deleted
}

// Insert inserts the NotificationRemoved to the database.
func (nr *NotificationRemoved) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if nr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.notification_removed (` +
		`ForUserId` +
		`) VALUES (` +
		`$1` +
		`)`

	// run query
	XOLog(sqlstr, nr.Foruserid)
	res, err := db.Exec(sqlstr, nr.Foruserid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	nr.Notificationid = int(id)
	nr._exists = true

	return nil
}

// Insert inserts the NotificationRemoved to the database.
func (nr *NotificationRemoved) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.notification_removed (` +
		`ForUserId` +
		`) VALUES (` +
		`$1` +
		`)`

	// run query
	XOLog(sqlstr, nr.Foruserid)
	res, err := db.Exec(sqlstr, nr.Foruserid)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	nr.Notificationid = int(id)
	nr._exists = true

	return nil
}

// Update updates the NotificationRemoved in the database.
func (nr *NotificationRemoved) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if nr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.notification_removed SET ` +
		`ForUserId = $1` +
		` WHERE NotificationId = ?`

	// run query
	XOLog(sqlstr, nr.Foruserid, nr.Notificationid)
	_, err = db.Exec(sqlstr, nr.Foruserid, nr.Notificationid)
	return err
}

// Save saves the NotificationRemoved to the database.
func (nr *NotificationRemoved) Save(db XODB) error {
	if nr.Exists() {
		return nr.Update(db)
	}

	return nr.Replace(db)
}

// Delete deletes the NotificationRemoved from the database.
func (nr *NotificationRemoved) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !nr._exists {
		return nil
	}

	// if deleted, bail
	if nr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.notification_removed WHERE NotificationId = ?`

	// run query
	XOLog(sqlstr, nr.Notificationid)
	_, err = db.Exec(sqlstr, nr.Notificationid)
	if err != nil {
		return err
	}

	// set deleted
	nr._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __NotificationRemoved_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __NotificationRemoved_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __NotificationRemoved_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewNotificationRemoved_Deleter() *__NotificationRemoved_Deleter {
	d := __NotificationRemoved_Deleter{whereSep: " AND "}
	return &d
}

func NewNotificationRemoved_Updater() *__NotificationRemoved_Updater {
	u := __NotificationRemoved_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewNotificationRemoved_Selector() *__NotificationRemoved_Selector {
	u := __NotificationRemoved_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__NotificationRemoved_Deleter) Or() *__NotificationRemoved_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Deleter) NotificationId_In(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) NotificationId_NotIn(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Deleter) NotificationId_EQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_NotEQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_LT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_LE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_GT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) NotificationId_GE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Deleter) ForUserId_In(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Deleter) ForUserId_NotIn(ins []int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Deleter) ForUserId_EQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_NotEQ(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_LT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_LE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_GT(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Deleter) ForUserId_GE(val int) *__NotificationRemoved_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__NotificationRemoved_Updater) Or() *__NotificationRemoved_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_In(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_NotIn(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Updater) NotificationId_EQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_NotEQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_LT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_LE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_GT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) NotificationId_GE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Updater) ForUserId_In(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Updater) ForUserId_NotIn(ins []int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Updater) ForUserId_EQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_NotEQ(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_LT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_LE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_GT(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Updater) ForUserId_GE(val int) *__NotificationRemoved_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__NotificationRemoved_Selector) Or() *__NotificationRemoved_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__NotificationRemoved_Selector) NotificationId_In(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) NotificationId_NotIn(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " NotificationId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Selector) NotificationId_EQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_NotEQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_LT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_LE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_GT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) NotificationId_GE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " NotificationId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__NotificationRemoved_Selector) ForUserId_In(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__NotificationRemoved_Selector) ForUserId_NotIn(ins []int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ForUserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__NotificationRemoved_Selector) ForUserId_EQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_NotEQ(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_LT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_LE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_GT(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__NotificationRemoved_Selector) ForUserId_GE(val int) *__NotificationRemoved_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ForUserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__NotificationRemoved_Updater) NotificationId(newVal int) *__NotificationRemoved_Updater {
	u.updates[" NotificationId = ? "] = newVal
	return u
}

func (u *__NotificationRemoved_Updater) NotificationId_Increment(count int) *__NotificationRemoved_Updater {
	if count > 0 {
		u.updates[" NotificationId = NotificationId+? "] = count
	}

	if count < 0 {
		u.updates[" NotificationId = NotificationId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__NotificationRemoved_Updater) ForUserId(newVal int) *__NotificationRemoved_Updater {
	u.updates[" ForUserId = ? "] = newVal
	return u
}

func (u *__NotificationRemoved_Updater) ForUserId_Increment(count int) *__NotificationRemoved_Updater {
	if count > 0 {
		u.updates[" ForUserId = ForUserId+? "] = count
	}

	if count < 0 {
		u.updates[" ForUserId = ForUserId-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__NotificationRemoved_Selector) OrderBy_NotificationId_Desc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY NotificationId DESC "
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_NotificationId_Asc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY NotificationId ASC "
	return u
}

func (u *__NotificationRemoved_Selector) Select_NotificationId() *__NotificationRemoved_Selector {
	u.selectCol = "NotificationId"
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_ForUserId_Desc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY ForUserId DESC "
	return u
}

func (u *__NotificationRemoved_Selector) OrderBy_ForUserId_Asc() *__NotificationRemoved_Selector {
	u.orderBy = " ORDER BY ForUserId ASC "
	return u
}

func (u *__NotificationRemoved_Selector) Select_ForUserId() *__NotificationRemoved_Selector {
	u.selectCol = "ForUserId"
	return u
}

func (u *__NotificationRemoved_Selector) Limit(num int) *__NotificationRemoved_Selector {
	u.limit = num
	return u
}

func (u *__NotificationRemoved_Selector) Offset(num int) *__NotificationRemoved_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__NotificationRemoved_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.notification_removed"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__NotificationRemoved_Selector) GetRow(db *sqlx.DB) (*NotificationRemoved, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &NotificationRemoved{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__NotificationRemoved_Selector) GetRows(db *sqlx.DB) ([]NotificationRemoved, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []NotificationRemoved
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__NotificationRemoved_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__NotificationRemoved_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__NotificationRemoved_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__NotificationRemoved_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__NotificationRemoved_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.notification_removed SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__NotificationRemoved_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.notification_removed WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  NotificationRemoved ////////////////
func MassInsert_NotificationRemoved(rows []NotificationRemoved, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.notification_removed (" +
		"ForUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Foruserid)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_NotificationRemoved(rows []NotificationRemoved, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.notification_removed (" +
		"ForUserId" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Foruserid)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

// PhoneContact represents a row from 'public.phone_contacts'.

// Manualy copy this to project
type __PhoneContact struct {
	Id                    int    `json:"Id"`                    // Id -
	PhoneDisplayName      string `json:"PhoneDisplayName"`      // PhoneDisplayName -
	PhoneFamilyName       string `json:"PhoneFamilyName"`       // PhoneFamilyName -
	PhoneNumber           string `json:"PhoneNumber"`           // PhoneNumber -
	PhoneNormalizedNumber string `json:"PhoneNormalizedNumber"` // PhoneNormalizedNumber -
	TRIAL_COLUMN6         int    `json:"TRIAL_COLUMN6"`         // TRIAL_COLUMN6 -
	TRIAL_COLUMN7         int    `json:"TRIAL_COLUMN7"`         // TRIAL_COLUMN7 -
	TRIAL_COLUMN8         int    `json:"TRIAL_COLUMN8"`         // TRIAL_COLUMN8 -
	TRIAL_COLUMN9         int    `json:"TRIAL_COLUMN9"`         // TRIAL_COLUMN9 -
	TRIAL_COLUMN10        int    `json:"TRIAL_COLUMN10"`        // TRIAL_COLUMN10 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PhoneContact exists in the database.
func (pc *PhoneContact) Exists() bool {
	return pc._exists
}

// Deleted provides information if the PhoneContact has been deleted from the database.
func (pc *PhoneContact) Deleted() bool {
	return pc._deleted
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if pc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)`

	// run query
	XOLog(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10)
	res, err := db.Exec(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.ID = int(id)
	pc._exists = true

	return nil
}

// Insert inserts the PhoneContact to the database.
func (pc *PhoneContact) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.phone_contacts (` +
		`PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)`

	// run query
	XOLog(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10)
	res, err := db.Exec(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	pc.ID = int(id)
	pc._exists = true

	return nil
}

// Update updates the PhoneContact in the database.
func (pc *PhoneContact) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if pc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.phone_contacts SET ` +
		`PhoneDisplayName = $1, PhoneFamilyName = $2, PhoneNumber = $3, PhoneNormalizedNumber = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7, TRIAL_COLUMN9 = $8, TRIAL_COLUMN10 = $9` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10, pc.ID)
	_, err = db.Exec(sqlstr, pc.Phonedisplayname, pc.Phonefamilyname, pc.Phonenumber, pc.Phonenormalizednumber, pc.TrialColumn6, pc.TrialColumn7, pc.TrialColumn8, pc.TrialColumn9, pc.TrialColumn10, pc.ID)
	return err
}

// Save saves the PhoneContact to the database.
func (pc *PhoneContact) Save(db XODB) error {
	if pc.Exists() {
		return pc.Update(db)
	}

	return pc.Replace(db)
}

// Delete deletes the PhoneContact from the database.
func (pc *PhoneContact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !pc._exists {
		return nil
	}

	// if deleted, bail
	if pc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.phone_contacts WHERE Id = ?`

	// run query
	XOLog(sqlstr, pc.ID)
	_, err = db.Exec(sqlstr, pc.ID)
	if err != nil {
		return err
	}

	// set deleted
	pc._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __PhoneContact_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __PhoneContact_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __PhoneContact_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPhoneContact_Deleter() *__PhoneContact_Deleter {
	d := __PhoneContact_Deleter{whereSep: " AND "}
	return &d
}

func NewPhoneContact_Updater() *__PhoneContact_Updater {
	u := __PhoneContact_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPhoneContact_Selector() *__PhoneContact_Selector {
	u := __PhoneContact_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__PhoneContact_Deleter) Or() *__PhoneContact_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Deleter) Id_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) Id_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) Id_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) Id_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN6_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN6_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN7_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN7_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN8_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN8_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN8_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN9_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN9_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN9_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN10_In(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) TRIAL_COLUMN10_NotIn(ins []int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_EQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_NotEQ(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_LT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_LE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_GT(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Deleter) TRIAL_COLUMN10_GE(val int) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Updater) Or() *__PhoneContact_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Updater) Id_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) Id_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) Id_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) Id_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN6_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN6_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN7_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN7_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN8_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN8_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN8_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN9_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN9_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN9_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN10_In(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN10_NotIn(ins []int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_EQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_NotEQ(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_LT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_LE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_GT(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Updater) TRIAL_COLUMN10_GE(val int) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__PhoneContact_Selector) Or() *__PhoneContact_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__PhoneContact_Selector) Id_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) Id_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) Id_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) Id_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN6_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN6_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN7_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN7_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN8_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN8_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN8_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN9_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN9_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN9_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN10_In(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) TRIAL_COLUMN10_NotIn(ins []int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_EQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_NotEQ(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_LT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_LE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_GT(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__PhoneContact_Selector) TRIAL_COLUMN10_GE(val int) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__PhoneContact_Deleter) PhoneDisplayName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneDisplayName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneDisplayName_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneFamilyName_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneFamilyName_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNumber_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Deleter) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Deleter) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Updater) PhoneDisplayName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneDisplayName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneDisplayName_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneFamilyName_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneFamilyName_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneFamilyName_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNumber_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Updater) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Updater) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Updater) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__PhoneContact_Selector) PhoneDisplayName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneDisplayName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneDisplayName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneDisplayName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneDisplayName_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneDisplayName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneFamilyName_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneFamilyName_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneFamilyName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneFamilyName_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneFamilyName_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneFamilyName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNumber_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_In(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__PhoneContact_Selector) PhoneNormalizedNumber_NotIn(ins []string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__PhoneContact_Selector) PhoneNormalizedNumber_Like(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__PhoneContact_Selector) PhoneNormalizedNumber_EQ(val string) *__PhoneContact_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PhoneNormalizedNumber = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__PhoneContact_Updater) Id(newVal int) *__PhoneContact_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) Id_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__PhoneContact_Updater) PhoneDisplayName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneDisplayName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneFamilyName(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneFamilyName = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNumber = ? "] = newVal
	return u
}

//ints

//string
func (u *__PhoneContact_Updater) PhoneNormalizedNumber(newVal string) *__PhoneContact_Updater {
	u.updates[" PhoneNormalizedNumber = ? "] = newVal
	return u
}

//ints

func (u *__PhoneContact_Updater) TRIAL_COLUMN6(newVal int) *__PhoneContact_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN6_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) TRIAL_COLUMN7(newVal int) *__PhoneContact_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN7_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) TRIAL_COLUMN8(newVal int) *__PhoneContact_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN8_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) TRIAL_COLUMN9(newVal int) *__PhoneContact_Updater {
	u.updates[" TRIAL_COLUMN9 = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN9_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__PhoneContact_Updater) TRIAL_COLUMN10(newVal int) *__PhoneContact_Updater {
	u.updates[" TRIAL_COLUMN10 = ? "] = newVal
	return u
}

func (u *__PhoneContact_Updater) TRIAL_COLUMN10_Increment(count int) *__PhoneContact_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__PhoneContact_Selector) OrderBy_Id_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_Id_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_Id() *__PhoneContact_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneDisplayName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneDisplayName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneDisplayName() *__PhoneContact_Selector {
	u.selectCol = "PhoneDisplayName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneFamilyName_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneFamilyName ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneFamilyName() *__PhoneContact_Selector {
	u.selectCol = "PhoneFamilyName"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_PhoneNormalizedNumber_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY PhoneNormalizedNumber ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_PhoneNormalizedNumber() *__PhoneContact_Selector {
	u.selectCol = "PhoneNormalizedNumber"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_TRIAL_COLUMN6() *__PhoneContact_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_TRIAL_COLUMN7() *__PhoneContact_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_TRIAL_COLUMN8() *__PhoneContact_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN9_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN9_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_TRIAL_COLUMN9() *__PhoneContact_Selector {
	u.selectCol = "TRIAL_COLUMN9"
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN10_Desc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 DESC "
	return u
}

func (u *__PhoneContact_Selector) OrderBy_TRIAL_COLUMN10_Asc() *__PhoneContact_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 ASC "
	return u
}

func (u *__PhoneContact_Selector) Select_TRIAL_COLUMN10() *__PhoneContact_Selector {
	u.selectCol = "TRIAL_COLUMN10"
	return u
}

func (u *__PhoneContact_Selector) Limit(num int) *__PhoneContact_Selector {
	u.limit = num
	return u
}

func (u *__PhoneContact_Selector) Offset(num int) *__PhoneContact_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__PhoneContact_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.phone_contacts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__PhoneContact_Selector) GetRow(db *sqlx.DB) (*PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &PhoneContact{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__PhoneContact_Selector) GetRows(db *sqlx.DB) ([]PhoneContact, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []PhoneContact
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__PhoneContact_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__PhoneContact_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__PhoneContact_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.phone_contacts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__PhoneContact_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.phone_contacts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  PhoneContact ////////////////
func MassInsert_PhoneContact(rows []PhoneContact, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Phonedisplayname)
		vals = append(vals, row.Phonefamilyname)
		vals = append(vals, row.Phonenumber)
		vals = append(vals, row.Phonenormalizednumber)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_PhoneContact(rows []PhoneContact, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.phone_contacts (" +
		"PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Phonedisplayname)
		vals = append(vals, row.Phonefamilyname)
		vals = append(vals, row.Phonenumber)
		vals = append(vals, row.Phonenormalizednumber)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// Post represents a row from 'public.post'.

// Manualy copy this to project
type __Post struct {
	Id             int    `json:"Id"`             // Id -
	UserId         int    `json:"UserId"`         // UserId -
	TypeId         int    `json:"TypeId"`         // TypeId -
	Text           string `json:"Text"`           // Text -
	FormatedText   string `json:"FormatedText"`   // FormatedText -
	TRIAL_COLUMN6  string `json:"TRIAL_COLUMN6"`  // TRIAL_COLUMN6 -
	TRIAL_COLUMN7  int    `json:"TRIAL_COLUMN7"`  // TRIAL_COLUMN7 -
	TRIAL_COLUMN8  int    `json:"TRIAL_COLUMN8"`  // TRIAL_COLUMN8 -
	TRIAL_COLUMN9  int    `json:"TRIAL_COLUMN9"`  // TRIAL_COLUMN9 -
	TRIAL_COLUMN10 int    `json:"TRIAL_COLUMN10"` // TRIAL_COLUMN10 -
	TRIAL_COLUMN11 int    `json:"TRIAL_COLUMN11"` // TRIAL_COLUMN11 -
	TRIAL_COLUMN12 int    `json:"TRIAL_COLUMN12"` // TRIAL_COLUMN12 -
	TRIAL_COLUMN13 int    `json:"TRIAL_COLUMN13"` // TRIAL_COLUMN13 -
	TRIAL_COLUMN14 int    `json:"TRIAL_COLUMN14"` // TRIAL_COLUMN14 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted provides information if the Post has been deleted from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.post (` +
		`UserId, TypeId, Text, FormatedText, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`

	// run query
	XOLog(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14)
	res, err := db.Exec(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = int(id)
	p._exists = true

	return nil
}

// Insert inserts the Post to the database.
func (p *Post) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.post (` +
		`UserId, TypeId, Text, FormatedText, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`

	// run query
	XOLog(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14)
	res, err := db.Exec(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = int(id)
	p._exists = true

	return nil
}

// Update updates the Post in the database.
func (p *Post) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.post SET ` +
		`UserId = $1, TypeId = $2, Text = $3, FormatedText = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7, TRIAL_COLUMN9 = $8, TRIAL_COLUMN10 = $9, TRIAL_COLUMN11 = $10, TRIAL_COLUMN12 = $11, TRIAL_COLUMN13 = $12, TRIAL_COLUMN14 = $13` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14, p.ID)
	_, err = db.Exec(sqlstr, p.Userid, p.Typeid, p.Text, p.Formatedtext, p.TrialColumn6, p.TrialColumn7, p.TrialColumn8, p.TrialColumn9, p.TrialColumn10, p.TrialColumn11, p.TrialColumn12, p.TrialColumn13, p.TrialColumn14, p.ID)
	return err
}

// Save saves the Post to the database.
func (p *Post) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Replace(db)
}

// Delete deletes the Post from the database.
func (p *Post) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.post WHERE Id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Post_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Post_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Post_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewPost_Deleter() *__Post_Deleter {
	d := __Post_Deleter{whereSep: " AND "}
	return &d
}

func NewPost_Updater() *__Post_Updater {
	u := __Post_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewPost_Selector() *__Post_Selector {
	u := __Post_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Post_Deleter) Or() *__Post_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Deleter) Id_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Id_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Id_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) Id_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) UserId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) UserId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) UserId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) UserId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TypeId_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TypeId_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TypeId_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TypeId_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN7_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN7_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN7_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN7_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN7_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN7_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN7_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN7_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN8_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN8_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN8_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN8_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN8_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN8_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN8_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN8_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN9_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN9_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN9_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN9_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN9_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN9_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN9_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN9_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN10_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN10_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN10_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN10_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN10_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN10_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN10_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN10_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN11_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN11_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN11_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN11_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN11_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN11_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN11_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN11_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN12_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN12_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN12_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN12_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN12_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN12_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN12_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN12_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN13_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN13_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN13_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN13_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN13_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN13_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN13_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN13_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN14_In(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN14_NotIn(ins []int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN14_EQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN14_NotEQ(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN14_LT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN14_LE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN14_GT(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Deleter) TRIAL_COLUMN14_GE(val int) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Updater) Or() *__Post_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Updater) Id_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Id_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Id_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) Id_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) UserId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) UserId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) UserId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) UserId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TypeId_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TypeId_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TypeId_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TypeId_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN7_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN7_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN7_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN7_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN7_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN7_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN7_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN7_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN8_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN8_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN8_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN8_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN8_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN8_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN8_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN8_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN9_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN9_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN9_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN9_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN9_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN9_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN9_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN9_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN10_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN10_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN10_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN10_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN10_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN10_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN10_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN10_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN11_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN11_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN11_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN11_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN11_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN11_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN11_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN11_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN12_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN12_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN12_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN12_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN12_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN12_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN12_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN12_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN13_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN13_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN13_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN13_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN13_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN13_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN13_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN13_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN14_In(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN14_NotIn(ins []int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN14_EQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN14_NotEQ(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN14_LT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN14_LE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN14_GT(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Updater) TRIAL_COLUMN14_GE(val int) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Post_Selector) Or() *__Post_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Post_Selector) Id_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Id_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Id_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) Id_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) UserId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) UserId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) UserId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) UserId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TypeId_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TypeId_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TypeId_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TypeId_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN7_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN7_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN7_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN7_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN7_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN7_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN7_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN7_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN8_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN8_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN8_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN8_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN8_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN8_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN8_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN8_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN9_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN9_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN9_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN9_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN9_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN9_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN9_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN9_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN10_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN10_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN10_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN10_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN10_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN10_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN10_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN10_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN11_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN11_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN11_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN11_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN11_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN11_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN11_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN11_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN12_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN12_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN12_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN12_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN12_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN12_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN12_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN12_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN13_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN13_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN13_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN13_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN13_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN13_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN13_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN13_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN14_In(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN14_NotIn(ins []int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN14_EQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN14_NotEQ(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN14_LT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN14_LE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN14_GT(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Post_Selector) TRIAL_COLUMN14_GE(val int) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Post_Deleter) Text_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) Text_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) Text_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) Text_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) FormatedText_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) FormatedText_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) FormatedText_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) FormatedText_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Deleter) TRIAL_COLUMN6_In(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Deleter) TRIAL_COLUMN6_NotIn(ins []string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Deleter) TRIAL_COLUMN6_Like(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Deleter) TRIAL_COLUMN6_EQ(val string) *__Post_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Updater) Text_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) Text_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) Text_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) Text_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) FormatedText_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) FormatedText_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) FormatedText_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) FormatedText_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Updater) TRIAL_COLUMN6_In(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Updater) TRIAL_COLUMN6_NotIn(ins []string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Updater) TRIAL_COLUMN6_Like(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Updater) TRIAL_COLUMN6_EQ(val string) *__Post_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Post_Selector) Text_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) Text_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Text NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) Text_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) Text_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Text = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) FormatedText_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) FormatedText_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FormatedText NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) FormatedText_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) FormatedText_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FormatedText = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Post_Selector) TRIAL_COLUMN6_In(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Post_Selector) TRIAL_COLUMN6_NotIn(ins []string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Post_Selector) TRIAL_COLUMN6_Like(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Post_Selector) TRIAL_COLUMN6_EQ(val string) *__Post_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Post_Updater) Id(newVal int) *__Post_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Post_Updater) Id_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) UserId(newVal int) *__Post_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Post_Updater) UserId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TypeId(newVal int) *__Post_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__Post_Updater) TypeId_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Post_Updater) Text(newVal string) *__Post_Updater {
	u.updates[" Text = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) FormatedText(newVal string) *__Post_Updater {
	u.updates[" FormatedText = ? "] = newVal
	return u
}

//ints

//string
func (u *__Post_Updater) TRIAL_COLUMN6(newVal string) *__Post_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

//ints

func (u *__Post_Updater) TRIAL_COLUMN7(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN7_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN7 = TRIAL_COLUMN7-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN8(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN8_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN9(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN9 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN9_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN9 = TRIAL_COLUMN9-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN10(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN10 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN10_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN11(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN11 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN11_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN11 = TRIAL_COLUMN11+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN11 = TRIAL_COLUMN11-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN12(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN12 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN12_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN12 = TRIAL_COLUMN12+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN12 = TRIAL_COLUMN12-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN13(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN13 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN13_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN13 = TRIAL_COLUMN13+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN13 = TRIAL_COLUMN13-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Post_Updater) TRIAL_COLUMN14(newVal int) *__Post_Updater {
	u.updates[" TRIAL_COLUMN14 = ? "] = newVal
	return u
}

func (u *__Post_Updater) TRIAL_COLUMN14_Increment(count int) *__Post_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN14 = TRIAL_COLUMN14+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN14 = TRIAL_COLUMN14-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Post_Selector) OrderBy_Id_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Id_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Post_Selector) Select_Id() *__Post_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_UserId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Post_Selector) Select_UserId() *__Post_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TypeId_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__Post_Selector) Select_TypeId() *__Post_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__Post_Selector) OrderBy_Text_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY Text DESC "
	return u
}

func (u *__Post_Selector) OrderBy_Text_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY Text ASC "
	return u
}

func (u *__Post_Selector) Select_Text() *__Post_Selector {
	u.selectCol = "Text"
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText DESC "
	return u
}

func (u *__Post_Selector) OrderBy_FormatedText_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY FormatedText ASC "
	return u
}

func (u *__Post_Selector) Select_FormatedText() *__Post_Selector {
	u.selectCol = "FormatedText"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN6() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN7() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN8() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN9_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN9_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN9() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN9"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN10_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN10_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN10() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN10"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN11_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN11 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN11_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN11 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN11() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN11"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN12_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN12 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN12_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN12 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN12() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN12"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN13_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN13 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN13_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN13 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN13() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN13"
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN14_Desc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN14 DESC "
	return u
}

func (u *__Post_Selector) OrderBy_TRIAL_COLUMN14_Asc() *__Post_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN14 ASC "
	return u
}

func (u *__Post_Selector) Select_TRIAL_COLUMN14() *__Post_Selector {
	u.selectCol = "TRIAL_COLUMN14"
	return u
}

func (u *__Post_Selector) Limit(num int) *__Post_Selector {
	u.limit = num
	return u
}

func (u *__Post_Selector) Offset(num int) *__Post_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Post_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.post"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Post_Selector) GetRow(db *sqlx.DB) (*Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Post{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Post_Selector) GetRows(db *sqlx.DB) ([]Post, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Post
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Post_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Post_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Post_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Post_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.post SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Post_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.post WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Post ////////////////
func MassInsert_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.post (" +
		"UserId, TypeId, Text, FormatedText, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Text)
		vals = append(vals, row.Formatedtext)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)
		vals = append(vals, row.TrialColumn11)
		vals = append(vals, row.TrialColumn12)
		vals = append(vals, row.TrialColumn13)
		vals = append(vals, row.TrialColumn14)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Post(rows []Post, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.post (" +
		"UserId, TypeId, Text, FormatedText, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Text)
		vals = append(vals, row.Formatedtext)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)
		vals = append(vals, row.TrialColumn11)
		vals = append(vals, row.TrialColumn12)
		vals = append(vals, row.TrialColumn13)
		vals = append(vals, row.TrialColumn14)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// RecommendUser represents a row from 'public.recommend_user'.

// Manualy copy this to project
type __RecommendUser struct {
	Id          int     `json:"Id"`          // Id -
	UserId      int     `json:"UserId"`      // UserId -
	TargetId    int     `json:"TargetId"`    // TargetId -
	Weight      float64 `json:"Weight"`      // Weight -
	CreatedTime int     `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RecommendUser exists in the database.
func (ru *RecommendUser) Exists() bool {
	return ru._exists
}

// Deleted provides information if the RecommendUser has been deleted from the database.
func (ru *RecommendUser) Deleted() bool {
	return ru._deleted
}

// Insert inserts the RecommendUser to the database.
func (ru *RecommendUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ru._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.recommend_user (` +
		`UserId, TargetId, Weight, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime)
	res, err := db.Exec(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ru.ID = int(id)
	ru._exists = true

	return nil
}

// Insert inserts the RecommendUser to the database.
func (ru *RecommendUser) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.recommend_user (` +
		`UserId, TargetId, Weight, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime)
	res, err := db.Exec(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ru.ID = int(id)
	ru._exists = true

	return nil
}

// Update updates the RecommendUser in the database.
func (ru *RecommendUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ru._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ru._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.recommend_user SET ` +
		`UserId = $1, TargetId = $2, Weight = $3, CreatedTime = $4` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime, ru.ID)
	_, err = db.Exec(sqlstr, ru.Userid, ru.Targetid, ru.Weight, ru.Createdtime, ru.ID)
	return err
}

// Save saves the RecommendUser to the database.
func (ru *RecommendUser) Save(db XODB) error {
	if ru.Exists() {
		return ru.Update(db)
	}

	return ru.Replace(db)
}

// Delete deletes the RecommendUser from the database.
func (ru *RecommendUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ru._exists {
		return nil
	}

	// if deleted, bail
	if ru._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.recommend_user WHERE Id = ?`

	// run query
	XOLog(sqlstr, ru.ID)
	_, err = db.Exec(sqlstr, ru.ID)
	if err != nil {
		return err
	}

	// set deleted
	ru._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __RecommendUser_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __RecommendUser_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __RecommendUser_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewRecommendUser_Deleter() *__RecommendUser_Deleter {
	d := __RecommendUser_Deleter{whereSep: " AND "}
	return &d
}

func NewRecommendUser_Updater() *__RecommendUser_Updater {
	u := __RecommendUser_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewRecommendUser_Selector() *__RecommendUser_Selector {
	u := __RecommendUser_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__RecommendUser_Deleter) Or() *__RecommendUser_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Deleter) Id_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) Id_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) Id_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) Id_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) UserId_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) UserId_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) UserId_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) UserId_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) TargetId_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) TargetId_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) TargetId_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) TargetId_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Deleter) CreatedTime_In(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Deleter) CreatedTime_NotIn(ins []int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Deleter) CreatedTime_EQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_NotEQ(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_LT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_LE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_GT(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Deleter) CreatedTime_GE(val int) *__RecommendUser_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__RecommendUser_Updater) Or() *__RecommendUser_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Updater) Id_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) Id_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) Id_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) Id_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) UserId_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) UserId_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) UserId_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) UserId_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) TargetId_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) TargetId_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) TargetId_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) TargetId_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Updater) CreatedTime_In(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Updater) CreatedTime_NotIn(ins []int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Updater) CreatedTime_EQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_NotEQ(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_LT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_LE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_GT(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Updater) CreatedTime_GE(val int) *__RecommendUser_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__RecommendUser_Selector) Or() *__RecommendUser_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__RecommendUser_Selector) Id_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) Id_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) Id_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) Id_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) UserId_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) UserId_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) UserId_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) UserId_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) TargetId_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) TargetId_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) TargetId_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) TargetId_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__RecommendUser_Selector) CreatedTime_In(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__RecommendUser_Selector) CreatedTime_NotIn(ins []int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__RecommendUser_Selector) CreatedTime_EQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_NotEQ(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_LT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_LE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_GT(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__RecommendUser_Selector) CreatedTime_GE(val int) *__RecommendUser_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__RecommendUser_Updater) Id(newVal int) *__RecommendUser_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__RecommendUser_Updater) Id_Increment(count int) *__RecommendUser_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__RecommendUser_Updater) UserId(newVal int) *__RecommendUser_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__RecommendUser_Updater) UserId_Increment(count int) *__RecommendUser_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__RecommendUser_Updater) TargetId(newVal int) *__RecommendUser_Updater {
	u.updates[" TargetId = ? "] = newVal
	return u
}

func (u *__RecommendUser_Updater) TargetId_Increment(count int) *__RecommendUser_Updater {
	if count > 0 {
		u.updates[" TargetId = TargetId+? "] = count
	}

	if count < 0 {
		u.updates[" TargetId = TargetId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string

//ints

func (u *__RecommendUser_Updater) CreatedTime(newVal int) *__RecommendUser_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__RecommendUser_Updater) CreatedTime_Increment(count int) *__RecommendUser_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__RecommendUser_Selector) OrderBy_Id_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Id_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_Id() *__RecommendUser_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_UserId_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_UserId_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_UserId() *__RecommendUser_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_TargetId_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY TargetId DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_TargetId_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY TargetId ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_TargetId() *__RecommendUser_Selector {
	u.selectCol = "TargetId"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Weight_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Weight DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_Weight_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY Weight ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_Weight() *__RecommendUser_Selector {
	u.selectCol = "Weight"
	return u
}

func (u *__RecommendUser_Selector) OrderBy_CreatedTime_Desc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__RecommendUser_Selector) OrderBy_CreatedTime_Asc() *__RecommendUser_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__RecommendUser_Selector) Select_CreatedTime() *__RecommendUser_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__RecommendUser_Selector) Limit(num int) *__RecommendUser_Selector {
	u.limit = num
	return u
}

func (u *__RecommendUser_Selector) Offset(num int) *__RecommendUser_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__RecommendUser_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.recommend_user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__RecommendUser_Selector) GetRow(db *sqlx.DB) (*RecommendUser, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &RecommendUser{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__RecommendUser_Selector) GetRows(db *sqlx.DB) ([]RecommendUser, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []RecommendUser
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__RecommendUser_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__RecommendUser_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__RecommendUser_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.recommend_user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__RecommendUser_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.recommend_user WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  RecommendUser ////////////////
func MassInsert_RecommendUser(rows []RecommendUser, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.recommend_user (" +
		"UserId, TargetId, Weight, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Targetid)
		vals = append(vals, row.Weight)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_RecommendUser(rows []RecommendUser, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.recommend_user (" +
		"UserId, TargetId, Weight, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Targetid)
		vals = append(vals, row.Weight)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// SearchClicked represents a row from 'public.search_clicked'.

// Manualy copy this to project
type __SearchClicked struct {
	Id            int    `json:"Id"`            // Id -
	Query         string `json:"Query"`         // Query -
	ClickType     int    `json:"ClickType"`     // ClickType -
	TargetId      int    `json:"TargetId"`      // TargetId -
	UserId        int    `json:"UserId"`        // UserId -
	TRIAL_COLUMN6 int    `json:"TRIAL_COLUMN6"` // TRIAL_COLUMN6 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SearchClicked exists in the database.
func (sc *SearchClicked) Exists() bool {
	return sc._exists
}

// Deleted provides information if the SearchClicked has been deleted from the database.
func (sc *SearchClicked) Deleted() bool {
	return sc._deleted
}

// Insert inserts the SearchClicked to the database.
func (sc *SearchClicked) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.search_clicked (` +
		`Query, ClickType, TargetId, UserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6)
	res, err := db.Exec(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.ID = int(id)
	sc._exists = true

	return nil
}

// Insert inserts the SearchClicked to the database.
func (sc *SearchClicked) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.search_clicked (` +
		`Query, ClickType, TargetId, UserId, TRIAL_COLUMN6` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6)
	res, err := db.Exec(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sc.ID = int(id)
	sc._exists = true

	return nil
}

// Update updates the SearchClicked in the database.
func (sc *SearchClicked) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.search_clicked SET ` +
		`Query = $1, ClickType = $2, TargetId = $3, UserId = $4, TRIAL_COLUMN6 = $5` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6, sc.ID)
	_, err = db.Exec(sqlstr, sc.Query, sc.Clicktype, sc.Targetid, sc.Userid, sc.TrialColumn6, sc.ID)
	return err
}

// Save saves the SearchClicked to the database.
func (sc *SearchClicked) Save(db XODB) error {
	if sc.Exists() {
		return sc.Update(db)
	}

	return sc.Replace(db)
}

// Delete deletes the SearchClicked from the database.
func (sc *SearchClicked) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sc._exists {
		return nil
	}

	// if deleted, bail
	if sc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.search_clicked WHERE Id = ?`

	// run query
	XOLog(sqlstr, sc.ID)
	_, err = db.Exec(sqlstr, sc.ID)
	if err != nil {
		return err
	}

	// set deleted
	sc._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __SearchClicked_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __SearchClicked_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __SearchClicked_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewSearchClicked_Deleter() *__SearchClicked_Deleter {
	d := __SearchClicked_Deleter{whereSep: " AND "}
	return &d
}

func NewSearchClicked_Updater() *__SearchClicked_Updater {
	u := __SearchClicked_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewSearchClicked_Selector() *__SearchClicked_Selector {
	u := __SearchClicked_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__SearchClicked_Deleter) Or() *__SearchClicked_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__SearchClicked_Deleter) Id_In(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) Id_NotIn(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) Id_EQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) Id_NotEQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) Id_LT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) Id_LE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) Id_GT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) Id_GE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Deleter) ClickType_In(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) ClickType_NotIn(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) ClickType_EQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) ClickType_NotEQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) ClickType_LT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) ClickType_LE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) ClickType_GT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) ClickType_GE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Deleter) TargetId_In(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) TargetId_NotIn(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) TargetId_EQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TargetId_NotEQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TargetId_LT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TargetId_LE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TargetId_GT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TargetId_GE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Deleter) UserId_In(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) UserId_NotIn(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) UserId_EQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) UserId_NotEQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) UserId_LT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) UserId_LE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) UserId_GT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) UserId_GE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Deleter) TRIAL_COLUMN6_In(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_EQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_LT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_LE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_GT(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Deleter) TRIAL_COLUMN6_GE(val int) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__SearchClicked_Updater) Or() *__SearchClicked_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__SearchClicked_Updater) Id_In(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) Id_NotIn(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) Id_EQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) Id_NotEQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) Id_LT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) Id_LE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) Id_GT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) Id_GE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Updater) ClickType_In(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) ClickType_NotIn(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) ClickType_EQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) ClickType_NotEQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) ClickType_LT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) ClickType_LE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) ClickType_GT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) ClickType_GE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Updater) TargetId_In(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) TargetId_NotIn(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) TargetId_EQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TargetId_NotEQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TargetId_LT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TargetId_LE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TargetId_GT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TargetId_GE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Updater) UserId_In(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) UserId_NotIn(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) UserId_EQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) UserId_NotEQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) UserId_LT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) UserId_LE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) UserId_GT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) UserId_GE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Updater) TRIAL_COLUMN6_In(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_EQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_NotEQ(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_LT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_LE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_GT(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Updater) TRIAL_COLUMN6_GE(val int) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__SearchClicked_Selector) Or() *__SearchClicked_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__SearchClicked_Selector) Id_In(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) Id_NotIn(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) Id_EQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) Id_NotEQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) Id_LT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) Id_LE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) Id_GT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) Id_GE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Selector) ClickType_In(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) ClickType_NotIn(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClickType NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) ClickType_EQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) ClickType_NotEQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) ClickType_LT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) ClickType_LE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) ClickType_GT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) ClickType_GE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClickType >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Selector) TargetId_In(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) TargetId_NotIn(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TargetId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) TargetId_EQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TargetId_NotEQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TargetId_LT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TargetId_LE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TargetId_GT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TargetId_GE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TargetId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Selector) UserId_In(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) UserId_NotIn(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) UserId_EQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) UserId_NotEQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) UserId_LT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) UserId_LE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) UserId_GT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) UserId_GE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__SearchClicked_Selector) TRIAL_COLUMN6_In(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_EQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_NotEQ(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_LT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_LE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_GT(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__SearchClicked_Selector) TRIAL_COLUMN6_GE(val int) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__SearchClicked_Deleter) Query_In(ins []string) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Deleter) Query_NotIn(ins []string) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SearchClicked_Deleter) Query_Like(val string) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Deleter) Query_EQ(val string) *__SearchClicked_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__SearchClicked_Updater) Query_In(ins []string) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Updater) Query_NotIn(ins []string) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SearchClicked_Updater) Query_Like(val string) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Updater) Query_EQ(val string) *__SearchClicked_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__SearchClicked_Selector) Query_In(ins []string) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__SearchClicked_Selector) Query_NotIn(ins []string) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Query NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__SearchClicked_Selector) Query_Like(val string) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__SearchClicked_Selector) Query_EQ(val string) *__SearchClicked_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Query = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__SearchClicked_Updater) Id(newVal int) *__SearchClicked_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__SearchClicked_Updater) Id_Increment(count int) *__SearchClicked_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__SearchClicked_Updater) Query(newVal string) *__SearchClicked_Updater {
	u.updates[" Query = ? "] = newVal
	return u
}

//ints

func (u *__SearchClicked_Updater) ClickType(newVal int) *__SearchClicked_Updater {
	u.updates[" ClickType = ? "] = newVal
	return u
}

func (u *__SearchClicked_Updater) ClickType_Increment(count int) *__SearchClicked_Updater {
	if count > 0 {
		u.updates[" ClickType = ClickType+? "] = count
	}

	if count < 0 {
		u.updates[" ClickType = ClickType-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SearchClicked_Updater) TargetId(newVal int) *__SearchClicked_Updater {
	u.updates[" TargetId = ? "] = newVal
	return u
}

func (u *__SearchClicked_Updater) TargetId_Increment(count int) *__SearchClicked_Updater {
	if count > 0 {
		u.updates[" TargetId = TargetId+? "] = count
	}

	if count < 0 {
		u.updates[" TargetId = TargetId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SearchClicked_Updater) UserId(newVal int) *__SearchClicked_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__SearchClicked_Updater) UserId_Increment(count int) *__SearchClicked_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__SearchClicked_Updater) TRIAL_COLUMN6(newVal int) *__SearchClicked_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__SearchClicked_Updater) TRIAL_COLUMN6_Increment(count int) *__SearchClicked_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__SearchClicked_Selector) OrderBy_Id_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_Id_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_Id() *__SearchClicked_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__SearchClicked_Selector) OrderBy_Query_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY Query DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_Query_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY Query ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_Query() *__SearchClicked_Selector {
	u.selectCol = "Query"
	return u
}

func (u *__SearchClicked_Selector) OrderBy_ClickType_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY ClickType DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_ClickType_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY ClickType ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_ClickType() *__SearchClicked_Selector {
	u.selectCol = "ClickType"
	return u
}

func (u *__SearchClicked_Selector) OrderBy_TargetId_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY TargetId DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_TargetId_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY TargetId ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_TargetId() *__SearchClicked_Selector {
	u.selectCol = "TargetId"
	return u
}

func (u *__SearchClicked_Selector) OrderBy_UserId_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_UserId_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_UserId() *__SearchClicked_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__SearchClicked_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__SearchClicked_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__SearchClicked_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__SearchClicked_Selector) Select_TRIAL_COLUMN6() *__SearchClicked_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__SearchClicked_Selector) Limit(num int) *__SearchClicked_Selector {
	u.limit = num
	return u
}

func (u *__SearchClicked_Selector) Offset(num int) *__SearchClicked_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__SearchClicked_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.search_clicked"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__SearchClicked_Selector) GetRow(db *sqlx.DB) (*SearchClicked, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &SearchClicked{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__SearchClicked_Selector) GetRows(db *sqlx.DB) ([]SearchClicked, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []SearchClicked
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__SearchClicked_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__SearchClicked_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__SearchClicked_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__SearchClicked_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__SearchClicked_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.search_clicked SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__SearchClicked_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.search_clicked WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  SearchClicked ////////////////
func MassInsert_SearchClicked(rows []SearchClicked, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.search_clicked (" +
		"Query, ClickType, TargetId, UserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Query)
		vals = append(vals, row.Clicktype)
		vals = append(vals, row.Targetid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_SearchClicked(rows []SearchClicked, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.search_clicked (" +
		"Query, ClickType, TargetId, UserId, TRIAL_COLUMN6" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Query)
		vals = append(vals, row.Clicktype)
		vals = append(vals, row.Targetid)
		vals = append(vals, row.Userid)
		vals = append(vals, row.TrialColumn6)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

// Session represents a row from 'public.session'.

// Manualy copy this to project
type __Session struct {
	Id             int    `json:"Id"`             // Id -
	UserId         int    `json:"UserId"`         // UserId -
	SessionUuid    string `json:"SessionUuid"`    // SessionUuid -
	ClientUuid     string `json:"ClientUuid"`     // ClientUuid -
	DeviceUuid     string `json:"DeviceUuid"`     // DeviceUuid -
	TRIAL_COLUMN6  int    `json:"TRIAL_COLUMN6"`  // TRIAL_COLUMN6 -
	TRIAL_COLUMN7  string `json:"TRIAL_COLUMN7"`  // TRIAL_COLUMN7 -
	TRIAL_COLUMN8  string `json:"TRIAL_COLUMN8"`  // TRIAL_COLUMN8 -
	TRIAL_COLUMN9  string `json:"TRIAL_COLUMN9"`  // TRIAL_COLUMN9 -
	TRIAL_COLUMN10 int    `json:"TRIAL_COLUMN10"` // TRIAL_COLUMN10 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Session exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted provides information if the Session has been deleted from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the Session to the database.
func (s *Session) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.session (` +
		`UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)`

	// run query
	XOLog(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10)
	res, err := db.Exec(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int(id)
	s._exists = true

	return nil
}

// Insert inserts the Session to the database.
func (s *Session) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.session (` +
		`UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`)`

	// run query
	XOLog(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10)
	res, err := db.Exec(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int(id)
	s._exists = true

	return nil
}

// Update updates the Session in the database.
func (s *Session) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.session SET ` +
		`UserId = $1, SessionUuid = $2, ClientUuid = $3, DeviceUuid = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7, TRIAL_COLUMN9 = $8, TRIAL_COLUMN10 = $9` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10, s.ID)
	_, err = db.Exec(sqlstr, s.Userid, s.Sessionuuid, s.Clientuuid, s.Deviceuuid, s.TrialColumn6, s.TrialColumn7, s.TrialColumn8, s.TrialColumn9, s.TrialColumn10, s.ID)
	return err
}

// Save saves the Session to the database.
func (s *Session) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Replace(db)
}

// Delete deletes the Session from the database.
func (s *Session) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.session WHERE Id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Session_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Session_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Session_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewSession_Deleter() *__Session_Deleter {
	d := __Session_Deleter{whereSep: " AND "}
	return &d
}

func NewSession_Updater() *__Session_Updater {
	u := __Session_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewSession_Selector() *__Session_Selector {
	u := __Session_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Session_Deleter) Or() *__Session_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Deleter) Id_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) Id_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) Id_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) Id_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) UserId_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) UserId_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) UserId_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) UserId_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) TRIAL_COLUMN6_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) TRIAL_COLUMN6_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) TRIAL_COLUMN6_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN6_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN6_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN6_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN6_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN6_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) TRIAL_COLUMN10_In(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) TRIAL_COLUMN10_NotIn(ins []int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) TRIAL_COLUMN10_EQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN10_NotEQ(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN10_LT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN10_LE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN10_GT(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Deleter) TRIAL_COLUMN10_GE(val int) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Updater) Or() *__Session_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Updater) Id_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) Id_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) Id_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) Id_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) UserId_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) UserId_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) UserId_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) UserId_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) TRIAL_COLUMN6_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) TRIAL_COLUMN6_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) TRIAL_COLUMN6_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN6_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN6_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN6_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN6_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN6_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) TRIAL_COLUMN10_In(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) TRIAL_COLUMN10_NotIn(ins []int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) TRIAL_COLUMN10_EQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN10_NotEQ(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN10_LT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN10_LE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN10_GT(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Updater) TRIAL_COLUMN10_GE(val int) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Session_Selector) Or() *__Session_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Session_Selector) Id_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) Id_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) Id_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) Id_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) UserId_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) UserId_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) UserId_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) UserId_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) TRIAL_COLUMN6_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) TRIAL_COLUMN6_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) TRIAL_COLUMN6_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN6_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN6_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN6_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN6_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN6_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) TRIAL_COLUMN10_In(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) TRIAL_COLUMN10_NotIn(ins []int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) TRIAL_COLUMN10_EQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN10_NotEQ(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN10_LT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN10_LE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN10_GT(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Session_Selector) TRIAL_COLUMN10_GE(val int) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Session_Deleter) SessionUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) SessionUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) SessionUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) SessionUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) ClientUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) ClientUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) ClientUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) ClientUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) DeviceUuid_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) DeviceUuid_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) DeviceUuid_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) DeviceUuid_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) TRIAL_COLUMN7_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) TRIAL_COLUMN7_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) TRIAL_COLUMN7_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) TRIAL_COLUMN7_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) TRIAL_COLUMN8_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) TRIAL_COLUMN8_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) TRIAL_COLUMN8_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) TRIAL_COLUMN8_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Deleter) TRIAL_COLUMN9_In(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Deleter) TRIAL_COLUMN9_NotIn(ins []string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Deleter) TRIAL_COLUMN9_Like(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Deleter) TRIAL_COLUMN9_EQ(val string) *__Session_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Updater) SessionUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) SessionUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) SessionUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) SessionUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) ClientUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) ClientUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) ClientUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) ClientUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) DeviceUuid_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) DeviceUuid_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) DeviceUuid_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) DeviceUuid_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) TRIAL_COLUMN7_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) TRIAL_COLUMN7_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) TRIAL_COLUMN7_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) TRIAL_COLUMN7_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) TRIAL_COLUMN8_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) TRIAL_COLUMN8_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) TRIAL_COLUMN8_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) TRIAL_COLUMN8_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Updater) TRIAL_COLUMN9_In(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Updater) TRIAL_COLUMN9_NotIn(ins []string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Updater) TRIAL_COLUMN9_Like(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Updater) TRIAL_COLUMN9_EQ(val string) *__Session_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Session_Selector) SessionUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) SessionUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " SessionUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) SessionUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) SessionUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " SessionUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) ClientUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) ClientUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " ClientUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) ClientUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) ClientUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " ClientUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) DeviceUuid_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) DeviceUuid_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " DeviceUuid NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) DeviceUuid_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) DeviceUuid_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " DeviceUuid = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) TRIAL_COLUMN7_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) TRIAL_COLUMN7_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) TRIAL_COLUMN7_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) TRIAL_COLUMN7_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) TRIAL_COLUMN8_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) TRIAL_COLUMN8_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) TRIAL_COLUMN8_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) TRIAL_COLUMN8_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Session_Selector) TRIAL_COLUMN9_In(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Session_Selector) TRIAL_COLUMN9_NotIn(ins []string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Session_Selector) TRIAL_COLUMN9_Like(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Session_Selector) TRIAL_COLUMN9_EQ(val string) *__Session_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Session_Updater) Id(newVal int) *__Session_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Session_Updater) Id_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Session_Updater) UserId(newVal int) *__Session_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__Session_Updater) UserId_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Session_Updater) SessionUuid(newVal string) *__Session_Updater {
	u.updates[" SessionUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) ClientUuid(newVal string) *__Session_Updater {
	u.updates[" ClientUuid = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) DeviceUuid(newVal string) *__Session_Updater {
	u.updates[" DeviceUuid = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) TRIAL_COLUMN6(newVal int) *__Session_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

func (u *__Session_Updater) TRIAL_COLUMN6_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN6 = TRIAL_COLUMN6-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Session_Updater) TRIAL_COLUMN7(newVal string) *__Session_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) TRIAL_COLUMN8(newVal string) *__Session_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

//ints

//string
func (u *__Session_Updater) TRIAL_COLUMN9(newVal string) *__Session_Updater {
	u.updates[" TRIAL_COLUMN9 = ? "] = newVal
	return u
}

//ints

func (u *__Session_Updater) TRIAL_COLUMN10(newVal int) *__Session_Updater {
	u.updates[" TRIAL_COLUMN10 = ? "] = newVal
	return u
}

func (u *__Session_Updater) TRIAL_COLUMN10_Increment(count int) *__Session_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN10 = TRIAL_COLUMN10-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Session_Selector) OrderBy_Id_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Session_Selector) OrderBy_Id_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Session_Selector) Select_Id() *__Session_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__Session_Selector) OrderBy_UserId_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__Session_Selector) Select_UserId() *__Session_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_SessionUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY SessionUuid ASC "
	return u
}

func (u *__Session_Selector) Select_SessionUuid() *__Session_Selector {
	u.selectCol = "SessionUuid"
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_ClientUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY ClientUuid ASC "
	return u
}

func (u *__Session_Selector) Select_ClientUuid() *__Session_Selector {
	u.selectCol = "ClientUuid"
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid DESC "
	return u
}

func (u *__Session_Selector) OrderBy_DeviceUuid_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY DeviceUuid ASC "
	return u
}

func (u *__Session_Selector) Select_DeviceUuid() *__Session_Selector {
	u.selectCol = "DeviceUuid"
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__Session_Selector) Select_TRIAL_COLUMN6() *__Session_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__Session_Selector) Select_TRIAL_COLUMN7() *__Session_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__Session_Selector) Select_TRIAL_COLUMN8() *__Session_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN9_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 DESC "
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN9_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 ASC "
	return u
}

func (u *__Session_Selector) Select_TRIAL_COLUMN9() *__Session_Selector {
	u.selectCol = "TRIAL_COLUMN9"
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN10_Desc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 DESC "
	return u
}

func (u *__Session_Selector) OrderBy_TRIAL_COLUMN10_Asc() *__Session_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 ASC "
	return u
}

func (u *__Session_Selector) Select_TRIAL_COLUMN10() *__Session_Selector {
	u.selectCol = "TRIAL_COLUMN10"
	return u
}

func (u *__Session_Selector) Limit(num int) *__Session_Selector {
	u.limit = num
	return u
}

func (u *__Session_Selector) Offset(num int) *__Session_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Session_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.session"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Session_Selector) GetRow(db *sqlx.DB) (*Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Session{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Session_Selector) GetRows(db *sqlx.DB) ([]Session, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Session
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Session_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Session_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Session_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Session_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.session SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Session_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.session WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Session ////////////////
func MassInsert_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.session (" +
		"UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Sessionuuid)
		vals = append(vals, row.Clientuuid)
		vals = append(vals, row.Deviceuuid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Session(rows []Session, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.session (" +
		"UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Userid)
		vals = append(vals, row.Sessionuuid)
		vals = append(vals, row.Clientuuid)
		vals = append(vals, row.Deviceuuid)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

// Tag represents a row from 'public.tags'.

// Manualy copy this to project
type __Tag struct {
	Id          int    `json:"Id"`          // Id -
	Name        string `json:"Name"`        // Name -
	Count       int    `json:"Count"`       // Count -
	IsBlocked   int    `json:"IsBlocked"`   // IsBlocked -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime)
	res, err := db.Exec(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = int(id)
	t._exists = true

	return nil
}

// Insert inserts the Tag to the database.
func (t *Tag) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.tags (` +
		`Name, Count, IsBlocked, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime)
	res, err := db.Exec(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = int(id)
	t._exists = true

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tags SET ` +
		`Name = $1, Count = $2, IsBlocked = $3, CreatedTime = $4` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime, t.ID)
	_, err = db.Exec(sqlstr, t.Name, t.Count, t.Isblocked, t.Createdtime, t.ID)
	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Replace(db)
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tags WHERE Id = ?`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __Tag_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __Tag_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __Tag_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTag_Deleter() *__Tag_Deleter {
	d := __Tag_Deleter{whereSep: " AND "}
	return &d
}

func NewTag_Updater() *__Tag_Updater {
	u := __Tag_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTag_Selector() *__Tag_Selector {
	u := __Tag_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__Tag_Deleter) Or() *__Tag_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Deleter) Id_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Id_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Id_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Id_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) Count_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Count_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Count_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) Count_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) IsBlocked_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) IsBlocked_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) IsBlocked_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) IsBlocked_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Deleter) CreatedTime_In(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) CreatedTime_NotIn(ins []int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) CreatedTime_EQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_NotEQ(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_LE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GT(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Deleter) CreatedTime_GE(val int) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Updater) Or() *__Tag_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Updater) Id_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Id_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Id_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Id_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) Count_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Count_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Count_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) Count_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) IsBlocked_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) IsBlocked_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) IsBlocked_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) IsBlocked_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Updater) CreatedTime_In(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) CreatedTime_NotIn(ins []int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) CreatedTime_EQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_NotEQ(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_LE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GT(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Updater) CreatedTime_GE(val int) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__Tag_Selector) Or() *__Tag_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__Tag_Selector) Id_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Id_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Id_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Id_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) Count_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Count_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Count NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Count_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) Count_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Count >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) IsBlocked_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) IsBlocked_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsBlocked NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) IsBlocked_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) IsBlocked_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsBlocked >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__Tag_Selector) CreatedTime_In(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) CreatedTime_NotIn(ins []int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) CreatedTime_EQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_NotEQ(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_LE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GT(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__Tag_Selector) CreatedTime_GE(val int) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__Tag_Deleter) Name_In(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Deleter) Name_NotIn(ins []string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Deleter) Name_Like(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Deleter) Name_EQ(val string) *__Tag_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Updater) Name_In(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Updater) Name_NotIn(ins []string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Updater) Name_Like(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Updater) Name_EQ(val string) *__Tag_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__Tag_Selector) Name_In(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__Tag_Selector) Name_NotIn(ins []string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Name NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__Tag_Selector) Name_Like(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__Tag_Selector) Name_EQ(val string) *__Tag_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Name = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__Tag_Updater) Id(newVal int) *__Tag_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__Tag_Updater) Id_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__Tag_Updater) Name(newVal string) *__Tag_Updater {
	u.updates[" Name = ? "] = newVal
	return u
}

//ints

func (u *__Tag_Updater) Count(newVal int) *__Tag_Updater {
	u.updates[" Count = ? "] = newVal
	return u
}

func (u *__Tag_Updater) Count_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates[" Count = Count+? "] = count
	}

	if count < 0 {
		u.updates[" Count = Count-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) IsBlocked(newVal int) *__Tag_Updater {
	u.updates[" IsBlocked = ? "] = newVal
	return u
}

func (u *__Tag_Updater) IsBlocked_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates[" IsBlocked = IsBlocked+? "] = count
	}

	if count < 0 {
		u.updates[" IsBlocked = IsBlocked-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__Tag_Updater) CreatedTime(newVal int) *__Tag_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__Tag_Updater) CreatedTime_Increment(count int) *__Tag_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__Tag_Selector) OrderBy_Id_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Id_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__Tag_Selector) Select_Id() *__Tag_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Name_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Name ASC "
	return u
}

func (u *__Tag_Selector) Select_Name() *__Tag_Selector {
	u.selectCol = "Name"
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_Count_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY Count ASC "
	return u
}

func (u *__Tag_Selector) Select_Count() *__Tag_Selector {
	u.selectCol = "Count"
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_IsBlocked_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY IsBlocked ASC "
	return u
}

func (u *__Tag_Selector) Select_IsBlocked() *__Tag_Selector {
	u.selectCol = "IsBlocked"
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Desc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__Tag_Selector) OrderBy_CreatedTime_Asc() *__Tag_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__Tag_Selector) Select_CreatedTime() *__Tag_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__Tag_Selector) Limit(num int) *__Tag_Selector {
	u.limit = num
	return u
}

func (u *__Tag_Selector) Offset(num int) *__Tag_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__Tag_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.tags"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__Tag_Selector) GetRow(db *sqlx.DB) (*Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &Tag{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__Tag_Selector) GetRows(db *sqlx.DB) ([]Tag, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []Tag
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__Tag_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__Tag_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__Tag_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__Tag_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.tags SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__Tag_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.tags WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  Tag ////////////////
func MassInsert_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.tags (" +
		"Name, Count, IsBlocked, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.Isblocked)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_Tag(rows []Tag, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.tags (" +
		"Name, Count, IsBlocked, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Name)
		vals = append(vals, row.Count)
		vals = append(vals, row.Isblocked)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// TagsPost represents a row from 'public.tags_posts'.

// Manualy copy this to project
type __TagsPost struct {
	Id          int `json:"Id"`          // Id -
	TagId       int `json:"TagId"`       // TagId -
	PostId      int `json:"PostId"`      // PostId -
	TypeId      int `json:"TypeId"`      // TypeId -
	CreatedTime int `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagsPost exists in the database.
func (tp *TagsPost) Exists() bool {
	return tp._exists
}

// Deleted provides information if the TagsPost has been deleted from the database.
func (tp *TagsPost) Deleted() bool {
	return tp._deleted
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime)
	res, err := db.Exec(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tp.ID = int(id)
	tp._exists = true

	return nil
}

// Insert inserts the TagsPost to the database.
func (tp *TagsPost) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.tags_posts (` +
		`TagId, PostId, TypeId, CreatedTime` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime)
	res, err := db.Exec(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tp.ID = int(id)
	tp._exists = true

	return nil
}

// Update updates the TagsPost in the database.
func (tp *TagsPost) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.tags_posts SET ` +
		`TagId = $1, PostId = $2, TypeId = $3, CreatedTime = $4` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime, tp.ID)
	_, err = db.Exec(sqlstr, tp.Tagid, tp.Postid, tp.Typeid, tp.Createdtime, tp.ID)
	return err
}

// Save saves the TagsPost to the database.
func (tp *TagsPost) Save(db XODB) error {
	if tp.Exists() {
		return tp.Update(db)
	}

	return tp.Replace(db)
}

// Delete deletes the TagsPost from the database.
func (tp *TagsPost) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tp._exists {
		return nil
	}

	// if deleted, bail
	if tp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.tags_posts WHERE Id = ?`

	// run query
	XOLog(sqlstr, tp.ID)
	_, err = db.Exec(sqlstr, tp.ID)
	if err != nil {
		return err
	}

	// set deleted
	tp._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __TagsPost_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __TagsPost_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __TagsPost_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewTagsPost_Deleter() *__TagsPost_Deleter {
	d := __TagsPost_Deleter{whereSep: " AND "}
	return &d
}

func NewTagsPost_Updater() *__TagsPost_Updater {
	u := __TagsPost_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewTagsPost_Selector() *__TagsPost_Selector {
	u := __TagsPost_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__TagsPost_Deleter) Or() *__TagsPost_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Deleter) Id_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) Id_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) Id_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) Id_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TagId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TagId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TagId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TagId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) PostId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) PostId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) PostId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) PostId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) TypeId_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) TypeId_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) TypeId_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) TypeId_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Deleter) CreatedTime_In(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Deleter) CreatedTime_NotIn(ins []int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Deleter) CreatedTime_EQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_NotEQ(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_LE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GT(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Deleter) CreatedTime_GE(val int) *__TagsPost_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Updater) Or() *__TagsPost_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Updater) Id_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) Id_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) Id_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) Id_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TagId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TagId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TagId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TagId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) PostId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) PostId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) PostId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) PostId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) TypeId_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) TypeId_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) TypeId_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) TypeId_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Updater) CreatedTime_In(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Updater) CreatedTime_NotIn(ins []int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Updater) CreatedTime_EQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_NotEQ(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_LE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GT(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Updater) CreatedTime_GE(val int) *__TagsPost_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__TagsPost_Selector) Or() *__TagsPost_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__TagsPost_Selector) Id_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) Id_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) Id_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) Id_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TagId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TagId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TagId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TagId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TagId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TagId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) PostId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) PostId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " PostId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) PostId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) PostId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " PostId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) TypeId_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) TypeId_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TypeId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) TypeId_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) TypeId_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TypeId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__TagsPost_Selector) CreatedTime_In(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__TagsPost_Selector) CreatedTime_NotIn(ins []int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__TagsPost_Selector) CreatedTime_EQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_NotEQ(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_LE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GT(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__TagsPost_Selector) CreatedTime_GE(val int) *__TagsPost_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__TagsPost_Updater) Id(newVal int) *__TagsPost_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) Id_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) TagId(newVal int) *__TagsPost_Updater {
	u.updates[" TagId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) TagId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" TagId = TagId+? "] = count
	}

	if count < 0 {
		u.updates[" TagId = TagId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) PostId(newVal int) *__TagsPost_Updater {
	u.updates[" PostId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) PostId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" PostId = PostId+? "] = count
	}

	if count < 0 {
		u.updates[" PostId = PostId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) TypeId(newVal int) *__TagsPost_Updater {
	u.updates[" TypeId = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) TypeId_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" TypeId = TypeId+? "] = count
	}

	if count < 0 {
		u.updates[" TypeId = TypeId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__TagsPost_Updater) CreatedTime(newVal int) *__TagsPost_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__TagsPost_Updater) CreatedTime_Increment(count int) *__TagsPost_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__TagsPost_Selector) OrderBy_Id_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_Id_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__TagsPost_Selector) Select_Id() *__TagsPost_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TagId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TagId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TagId() *__TagsPost_Selector {
	u.selectCol = "TagId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_PostId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY PostId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_PostId() *__TagsPost_Selector {
	u.selectCol = "PostId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_TypeId_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY TypeId ASC "
	return u
}

func (u *__TagsPost_Selector) Select_TypeId() *__TagsPost_Selector {
	u.selectCol = "TypeId"
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Desc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__TagsPost_Selector) OrderBy_CreatedTime_Asc() *__TagsPost_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__TagsPost_Selector) Select_CreatedTime() *__TagsPost_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__TagsPost_Selector) Limit(num int) *__TagsPost_Selector {
	u.limit = num
	return u
}

func (u *__TagsPost_Selector) Offset(num int) *__TagsPost_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__TagsPost_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.tags_posts"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__TagsPost_Selector) GetRow(db *sqlx.DB) (*TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &TagsPost{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__TagsPost_Selector) GetRows(db *sqlx.DB) ([]TagsPost, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []TagsPost
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__TagsPost_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__TagsPost_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__TagsPost_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.tags_posts SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__TagsPost_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.tags_posts WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  TagsPost ////////////////
func MassInsert_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Tagid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_TagsPost(rows []TagsPost, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.tags_posts (" +
		"TagId, PostId, TypeId, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Tagid)
		vals = append(vals, row.Postid)
		vals = append(vals, row.Typeid)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

// User represents a row from 'public.user'.

// Manualy copy this to project
type __User struct {
	Id             int    `json:"Id"`             // Id -
	UserName       string `json:"UserName"`       // UserName -
	FirstName      string `json:"FirstName"`      // FirstName -
	LastName       string `json:"LastName"`       // LastName -
	About          string `json:"About"`          // About -
	TRIAL_COLUMN6  string `json:"TRIAL_COLUMN6"`  // TRIAL_COLUMN6 -
	TRIAL_COLUMN7  string `json:"TRIAL_COLUMN7"`  // TRIAL_COLUMN7 -
	TRIAL_COLUMN8  int    `json:"TRIAL_COLUMN8"`  // TRIAL_COLUMN8 -
	TRIAL_COLUMN9  string `json:"TRIAL_COLUMN9"`  // TRIAL_COLUMN9 -
	TRIAL_COLUMN10 string `json:"TRIAL_COLUMN10"` // TRIAL_COLUMN10 -
	TRIAL_COLUMN11 int    `json:"TRIAL_COLUMN11"` // TRIAL_COLUMN11 -
	TRIAL_COLUMN12 string `json:"TRIAL_COLUMN12"` // TRIAL_COLUMN12 -
	TRIAL_COLUMN13 string `json:"TRIAL_COLUMN13"` // TRIAL_COLUMN13 -
	TRIAL_COLUMN14 int    `json:"TRIAL_COLUMN14"` // TRIAL_COLUMN14 -
	TRIAL_COLUMN15 int    `json:"TRIAL_COLUMN15"` // TRIAL_COLUMN15 -
	TRIAL_COLUMN16 int    `json:"TRIAL_COLUMN16"` // TRIAL_COLUMN16 -
	TRIAL_COLUMN17 int    `json:"TRIAL_COLUMN17"` // TRIAL_COLUMN17 -
	TRIAL_COLUMN18 int    `json:"TRIAL_COLUMN18"` // TRIAL_COLUMN18 -
	TRIAL_COLUMN19 int    `json:"TRIAL_COLUMN19"` // TRIAL_COLUMN19 -
	TRIAL_COLUMN20 int    `json:"TRIAL_COLUMN20"` // TRIAL_COLUMN20 -
	TRIAL_COLUMN21 int    `json:"TRIAL_COLUMN21"` // TRIAL_COLUMN21 -
	TRIAL_COLUMN22 int    `json:"TRIAL_COLUMN22"` // TRIAL_COLUMN22 -
	TRIAL_COLUMN23 int    `json:"TRIAL_COLUMN23"` // TRIAL_COLUMN23 -
	TRIAL_COLUMN24 int    `json:"TRIAL_COLUMN24"` // TRIAL_COLUMN24 -
	TRIAL_COLUMN25 string `json:"TRIAL_COLUMN25"` // TRIAL_COLUMN25 -
	TRIAL_COLUMN26 string `json:"TRIAL_COLUMN26"` // TRIAL_COLUMN26 -
	TRIAL_COLUMN27 string `json:"TRIAL_COLUMN27"` // TRIAL_COLUMN27 -
	TRIAL_COLUMN28 string `json:"TRIAL_COLUMN28"` // TRIAL_COLUMN28 -
	TRIAL_COLUMN29 int    `json:"TRIAL_COLUMN29"` // TRIAL_COLUMN29 -
	TRIAL_COLUMN30 int    `json:"TRIAL_COLUMN30"` // TRIAL_COLUMN30 -
	TRIAL_COLUMN31 int    `json:"TRIAL_COLUMN31"` // TRIAL_COLUMN31 -
	TRIAL_COLUMN32 string `json:"TRIAL_COLUMN32"` // TRIAL_COLUMN32 -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user (` +
		`UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`)`

	// run query
	XOLog(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32)
	res, err := db.Exec(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int(id)
	u._exists = true

	return nil
}

// Insert inserts the User to the database.
func (u *User) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.user (` +
		`UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31` +
		`)`

	// run query
	XOLog(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32)
	res, err := db.Exec(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user SET ` +
		`UserName = $1, FirstName = $2, LastName = $3, About = $4, TRIAL_COLUMN6 = $5, TRIAL_COLUMN7 = $6, TRIAL_COLUMN8 = $7, TRIAL_COLUMN9 = $8, TRIAL_COLUMN10 = $9, TRIAL_COLUMN11 = $10, TRIAL_COLUMN12 = $11, TRIAL_COLUMN13 = $12, TRIAL_COLUMN14 = $13, TRIAL_COLUMN15 = $14, TRIAL_COLUMN16 = $15, TRIAL_COLUMN17 = $16, TRIAL_COLUMN18 = $17, TRIAL_COLUMN19 = $18, TRIAL_COLUMN20 = $19, TRIAL_COLUMN21 = $20, TRIAL_COLUMN22 = $21, TRIAL_COLUMN23 = $22, TRIAL_COLUMN24 = $23, TRIAL_COLUMN25 = $24, TRIAL_COLUMN26 = $25, TRIAL_COLUMN27 = $26, TRIAL_COLUMN28 = $27, TRIAL_COLUMN29 = $28, TRIAL_COLUMN30 = $29, TRIAL_COLUMN31 = $30, TRIAL_COLUMN32 = $31` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32, u.ID)
	_, err = db.Exec(sqlstr, u.Username, u.Firstname, u.Lastname, u.About, u.TrialColumn6, u.TrialColumn7, u.TrialColumn8, u.TrialColumn9, u.TrialColumn10, u.TrialColumn11, u.TrialColumn12, u.TrialColumn13, u.TrialColumn14, u.TrialColumn15, u.TrialColumn16, u.TrialColumn17, u.TrialColumn18, u.TrialColumn19, u.TrialColumn20, u.TrialColumn21, u.TrialColumn22, u.TrialColumn23, u.TrialColumn24, u.TrialColumn25, u.TrialColumn26, u.TrialColumn27, u.TrialColumn28, u.TrialColumn29, u.TrialColumn30, u.TrialColumn31, u.TrialColumn32, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Replace(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __User_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __User_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __User_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUser_Deleter() *__User_Deleter {
	d := __User_Deleter{whereSep: " AND "}
	return &d
}

func NewUser_Updater() *__User_Updater {
	u := __User_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUser_Selector() *__User_Selector {
	u := __User_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__User_Deleter) Or() *__User_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__User_Deleter) Id_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) Id_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) Id_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) Id_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN8_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN8_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN8_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN8_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN8_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN8_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN8_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN8_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN11_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN11_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN11_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN11_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN11_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN11_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN11_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN11_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN14_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN14_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN14_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN14_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN14_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN14_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN14_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN14_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN15_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN15_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN15_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN15_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN15_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN15_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN15_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN15_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN16_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN16_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN16_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN16_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN16_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN16_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN16_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN16_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN17_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN17_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN17_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN17_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN17_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN17_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN17_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN17_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN18_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN18_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN18_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN18_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN18_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN18_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN18_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN18_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN19_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN19_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN19_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN19_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN19_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN19_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN19_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN19_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN20_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN20_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN20_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN20_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN20_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN20_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN20_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN20_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN21_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN21_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN21_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN21_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN21_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN21_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN21_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN21_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN22_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN22_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN22_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN22_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN22_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN22_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN22_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN22_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN23_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN23_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN23_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN23_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN23_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN23_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN23_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN23_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN24_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN24_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN24_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN24_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN24_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN24_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN24_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN24_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN29_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN29_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN29_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN29_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN29_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN29_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN29_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN29_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN30_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN30_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN30_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN30_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN30_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN30_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN30_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN30_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN31_In(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN31_NotIn(ins []int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN31_EQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN31_NotEQ(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN31_LT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN31_LE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN31_GT(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Deleter) TRIAL_COLUMN31_GE(val int) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Updater) Or() *__User_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__User_Updater) Id_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) Id_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) Id_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) Id_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN8_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN8_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN8_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN8_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN8_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN8_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN8_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN8_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN11_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN11_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN11_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN11_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN11_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN11_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN11_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN11_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN14_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN14_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN14_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN14_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN14_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN14_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN14_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN14_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN15_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN15_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN15_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN15_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN15_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN15_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN15_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN15_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN16_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN16_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN16_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN16_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN16_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN16_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN16_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN16_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN17_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN17_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN17_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN17_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN17_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN17_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN17_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN17_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN18_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN18_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN18_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN18_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN18_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN18_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN18_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN18_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN19_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN19_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN19_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN19_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN19_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN19_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN19_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN19_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN20_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN20_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN20_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN20_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN20_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN20_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN20_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN20_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN21_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN21_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN21_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN21_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN21_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN21_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN21_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN21_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN22_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN22_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN22_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN22_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN22_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN22_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN22_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN22_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN23_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN23_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN23_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN23_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN23_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN23_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN23_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN23_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN24_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN24_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN24_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN24_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN24_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN24_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN24_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN24_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN29_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN29_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN29_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN29_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN29_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN29_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN29_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN29_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN30_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN30_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN30_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN30_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN30_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN30_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN30_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN30_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN31_In(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN31_NotIn(ins []int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN31_EQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN31_NotEQ(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN31_LT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN31_LE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN31_GT(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Updater) TRIAL_COLUMN31_GE(val int) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__User_Selector) Or() *__User_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__User_Selector) Id_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) Id_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Id NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) Id_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) Id_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Id >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN8_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN8_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN8_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN8_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN8_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN8_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN8_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN8_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN8 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN11_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN11_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN11_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN11_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN11_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN11_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN11_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN11_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN11 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN14_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN14_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN14_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN14_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN14_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN14_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN14_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN14_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN14 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN15_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN15_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN15_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN15_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN15_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN15_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN15_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN15_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN15 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN16_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN16_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN16_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN16_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN16_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN16_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN16_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN16_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN16 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN17_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN17_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN17_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN17_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN17_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN17_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN17_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN17_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN17 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN18_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN18_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN18_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN18_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN18_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN18_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN18_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN18_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN18 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN19_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN19_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN19_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN19_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN19_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN19_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN19_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN19_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN19 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN20_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN20_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN20_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN20_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN20_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN20_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN20_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN20_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN20 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN21_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN21_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN21_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN21_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN21_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN21_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN21_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN21_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN21 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN22_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN22_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN22_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN22_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN22_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN22_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN22_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN22_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN22 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN23_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN23_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN23_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN23_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN23_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN23_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN23_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN23_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN23 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN24_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN24_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN24_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN24_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN24_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN24_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN24_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN24_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN24 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN29_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN29_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN29_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN29_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN29_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN29_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN29_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN29_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN29 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN30_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN30_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN30_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN30_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN30_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN30_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN30_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN30_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN30 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN31_In(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN31_NotIn(ins []int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN31_EQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN31_NotEQ(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN31_LT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN31_LE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN31_GT(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__User_Selector) TRIAL_COLUMN31_GE(val int) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN31 >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__User_Deleter) UserName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) UserName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) UserName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) UserName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) FirstName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) FirstName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) FirstName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) FirstName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) LastName_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) LastName_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) LastName_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) LastName_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) About_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) About_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) About_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) About_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN6_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN6_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN6_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN6_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN7_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN7_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN7_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN7_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN9_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN9_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN9_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN9_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN10_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN10_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN10_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN10_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN12_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN12_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN12_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN12_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN13_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN13_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN13_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN13_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN25_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN25_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN25_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN25_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN26_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN26_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN26_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN26_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN27_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN27_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN27_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN27_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN28_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN28_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN28_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN28_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Deleter) TRIAL_COLUMN32_In(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Deleter) TRIAL_COLUMN32_NotIn(ins []string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Deleter) TRIAL_COLUMN32_Like(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Deleter) TRIAL_COLUMN32_EQ(val string) *__User_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Updater) UserName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) UserName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) UserName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) UserName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) FirstName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) FirstName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) FirstName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) FirstName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) LastName_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) LastName_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) LastName_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) LastName_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) About_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) About_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) About_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) About_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN6_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN6_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN6_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN6_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN7_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN7_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN7_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN7_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN9_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN9_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN9_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN9_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN10_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN10_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN10_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN10_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN12_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN12_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN12_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN12_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN13_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN13_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN13_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN13_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN25_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN25_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN25_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN25_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN26_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN26_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN26_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN26_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN27_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN27_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN27_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN27_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN28_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN28_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN28_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN28_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Updater) TRIAL_COLUMN32_In(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Updater) TRIAL_COLUMN32_NotIn(ins []string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Updater) TRIAL_COLUMN32_Like(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Updater) TRIAL_COLUMN32_EQ(val string) *__User_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__User_Selector) UserName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) UserName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) UserName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) UserName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) FirstName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) FirstName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " FirstName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) FirstName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) FirstName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " FirstName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) LastName_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) LastName_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " LastName NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) LastName_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) LastName_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " LastName = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) About_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) About_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " About NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) About_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) About_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " About = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN6_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN6_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN6_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN6_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN6 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN7_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN7_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN7_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN7_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN7 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN9_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN9_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN9_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN9_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN9 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN10_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN10_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN10_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN10_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN10 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN12_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN12_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN12_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN12_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN12 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN13_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN13_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN13_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN13_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN13 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN25_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN25_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN25_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN25_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN25 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN26_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN26_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN26_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN26_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN26 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN27_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN27_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN27_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN27_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN27 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN28_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN28_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN28_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN28_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN28 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__User_Selector) TRIAL_COLUMN32_In(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__User_Selector) TRIAL_COLUMN32_NotIn(ins []string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__User_Selector) TRIAL_COLUMN32_Like(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__User_Selector) TRIAL_COLUMN32_EQ(val string) *__User_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " TRIAL_COLUMN32 = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__User_Updater) Id(newVal int) *__User_Updater {
	u.updates[" Id = ? "] = newVal
	return u
}

func (u *__User_Updater) Id_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" Id = Id+? "] = count
	}

	if count < 0 {
		u.updates[" Id = Id-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) UserName(newVal string) *__User_Updater {
	u.updates[" UserName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) FirstName(newVal string) *__User_Updater {
	u.updates[" FirstName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) LastName(newVal string) *__User_Updater {
	u.updates[" LastName = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) About(newVal string) *__User_Updater {
	u.updates[" About = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN6(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN6 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN7(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN7 = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) TRIAL_COLUMN8(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN8 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN8_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN8 = TRIAL_COLUMN8-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN9(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN9 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN10(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN10 = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) TRIAL_COLUMN11(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN11 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN11_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN11 = TRIAL_COLUMN11+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN11 = TRIAL_COLUMN11-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN12(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN12 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN13(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN13 = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) TRIAL_COLUMN14(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN14 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN14_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN14 = TRIAL_COLUMN14+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN14 = TRIAL_COLUMN14-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN15(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN15 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN15_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN15 = TRIAL_COLUMN15+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN15 = TRIAL_COLUMN15-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN16(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN16 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN16_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN16 = TRIAL_COLUMN16+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN16 = TRIAL_COLUMN16-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN17(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN17 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN17_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN17 = TRIAL_COLUMN17+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN17 = TRIAL_COLUMN17-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN18(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN18 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN18_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN18 = TRIAL_COLUMN18+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN18 = TRIAL_COLUMN18-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN19(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN19 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN19_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN19 = TRIAL_COLUMN19+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN19 = TRIAL_COLUMN19-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN20(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN20 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN20_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN20 = TRIAL_COLUMN20+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN20 = TRIAL_COLUMN20-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN21(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN21 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN21_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN21 = TRIAL_COLUMN21+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN21 = TRIAL_COLUMN21-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN22(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN22 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN22_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN22 = TRIAL_COLUMN22+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN22 = TRIAL_COLUMN22-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN23(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN23 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN23_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN23 = TRIAL_COLUMN23+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN23 = TRIAL_COLUMN23-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN24(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN24 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN24_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN24 = TRIAL_COLUMN24+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN24 = TRIAL_COLUMN24-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN25(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN25 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN26(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN26 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN27(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN27 = ? "] = newVal
	return u
}

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN28(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN28 = ? "] = newVal
	return u
}

//ints

func (u *__User_Updater) TRIAL_COLUMN29(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN29 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN29_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN29 = TRIAL_COLUMN29+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN29 = TRIAL_COLUMN29-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN30(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN30 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN30_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN30 = TRIAL_COLUMN30+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN30 = TRIAL_COLUMN30-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__User_Updater) TRIAL_COLUMN31(newVal int) *__User_Updater {
	u.updates[" TRIAL_COLUMN31 = ? "] = newVal
	return u
}

func (u *__User_Updater) TRIAL_COLUMN31_Increment(count int) *__User_Updater {
	if count > 0 {
		u.updates[" TRIAL_COLUMN31 = TRIAL_COLUMN31+? "] = count
	}

	if count < 0 {
		u.updates[" TRIAL_COLUMN31 = TRIAL_COLUMN31-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__User_Updater) TRIAL_COLUMN32(newVal string) *__User_Updater {
	u.updates[" TRIAL_COLUMN32 = ? "] = newVal
	return u
}

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__User_Selector) OrderBy_Id_Desc() *__User_Selector {
	u.orderBy = " ORDER BY Id DESC "
	return u
}

func (u *__User_Selector) OrderBy_Id_Asc() *__User_Selector {
	u.orderBy = " ORDER BY Id ASC "
	return u
}

func (u *__User_Selector) Select_Id() *__User_Selector {
	u.selectCol = "Id"
	return u
}

func (u *__User_Selector) OrderBy_UserName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY UserName DESC "
	return u
}

func (u *__User_Selector) OrderBy_UserName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY UserName ASC "
	return u
}

func (u *__User_Selector) Select_UserName() *__User_Selector {
	u.selectCol = "UserName"
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName DESC "
	return u
}

func (u *__User_Selector) OrderBy_FirstName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY FirstName ASC "
	return u
}

func (u *__User_Selector) Select_FirstName() *__User_Selector {
	u.selectCol = "FirstName"
	return u
}

func (u *__User_Selector) OrderBy_LastName_Desc() *__User_Selector {
	u.orderBy = " ORDER BY LastName DESC "
	return u
}

func (u *__User_Selector) OrderBy_LastName_Asc() *__User_Selector {
	u.orderBy = " ORDER BY LastName ASC "
	return u
}

func (u *__User_Selector) Select_LastName() *__User_Selector {
	u.selectCol = "LastName"
	return u
}

func (u *__User_Selector) OrderBy_About_Desc() *__User_Selector {
	u.orderBy = " ORDER BY About DESC "
	return u
}

func (u *__User_Selector) OrderBy_About_Asc() *__User_Selector {
	u.orderBy = " ORDER BY About ASC "
	return u
}

func (u *__User_Selector) Select_About() *__User_Selector {
	u.selectCol = "About"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN6_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN6_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN6 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN6() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN6"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN7_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN7_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN7 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN7() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN7"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN8_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN8_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN8 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN8() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN8"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN9_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN9_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN9 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN9() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN9"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN10_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN10_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN10 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN10() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN10"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN11_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN11 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN11_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN11 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN11() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN11"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN12_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN12 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN12_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN12 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN12() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN12"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN13_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN13 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN13_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN13 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN13() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN13"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN14_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN14 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN14_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN14 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN14() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN14"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN15_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN15 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN15_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN15 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN15() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN15"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN16_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN16 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN16_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN16 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN16() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN16"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN17_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN17 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN17_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN17 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN17() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN17"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN18_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN18 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN18_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN18 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN18() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN18"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN19_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN19 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN19_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN19 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN19() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN19"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN20_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN20 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN20_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN20 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN20() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN20"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN21_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN21 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN21_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN21 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN21() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN21"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN22_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN22 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN22_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN22 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN22() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN22"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN23_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN23 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN23_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN23 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN23() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN23"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN24_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN24 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN24_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN24 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN24() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN24"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN25_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN25 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN25_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN25 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN25() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN25"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN26_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN26 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN26_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN26 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN26() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN26"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN27_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN27 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN27_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN27 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN27() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN27"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN28_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN28 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN28_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN28 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN28() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN28"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN29_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN29 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN29_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN29 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN29() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN29"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN30_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN30 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN30_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN30 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN30() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN30"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN31_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN31 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN31_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN31 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN31() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN31"
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN32_Desc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN32 DESC "
	return u
}

func (u *__User_Selector) OrderBy_TRIAL_COLUMN32_Asc() *__User_Selector {
	u.orderBy = " ORDER BY TRIAL_COLUMN32 ASC "
	return u
}

func (u *__User_Selector) Select_TRIAL_COLUMN32() *__User_Selector {
	u.selectCol = "TRIAL_COLUMN32"
	return u
}

func (u *__User_Selector) Limit(num int) *__User_Selector {
	u.limit = num
	return u
}

func (u *__User_Selector) Offset(num int) *__User_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__User_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.user"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__User_Selector) GetRow(db *sqlx.DB) (*User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &User{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__User_Selector) GetRows(db *sqlx.DB) ([]User, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []User
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__User_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__User_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__User_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__User_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.user SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__User_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.user WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  User ////////////////
func MassInsert_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.user (" +
		"UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Username)
		vals = append(vals, row.Firstname)
		vals = append(vals, row.Lastname)
		vals = append(vals, row.About)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)
		vals = append(vals, row.TrialColumn11)
		vals = append(vals, row.TrialColumn12)
		vals = append(vals, row.TrialColumn13)
		vals = append(vals, row.TrialColumn14)
		vals = append(vals, row.TrialColumn15)
		vals = append(vals, row.TrialColumn16)
		vals = append(vals, row.TrialColumn17)
		vals = append(vals, row.TrialColumn18)
		vals = append(vals, row.TrialColumn19)
		vals = append(vals, row.TrialColumn20)
		vals = append(vals, row.TrialColumn21)
		vals = append(vals, row.TrialColumn22)
		vals = append(vals, row.TrialColumn23)
		vals = append(vals, row.TrialColumn24)
		vals = append(vals, row.TrialColumn25)
		vals = append(vals, row.TrialColumn26)
		vals = append(vals, row.TrialColumn27)
		vals = append(vals, row.TrialColumn28)
		vals = append(vals, row.TrialColumn29)
		vals = append(vals, row.TrialColumn30)
		vals = append(vals, row.TrialColumn31)
		vals = append(vals, row.TrialColumn32)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_User(rows []User, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.user (" +
		"UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Username)
		vals = append(vals, row.Firstname)
		vals = append(vals, row.Lastname)
		vals = append(vals, row.About)
		vals = append(vals, row.TrialColumn6)
		vals = append(vals, row.TrialColumn7)
		vals = append(vals, row.TrialColumn8)
		vals = append(vals, row.TrialColumn9)
		vals = append(vals, row.TrialColumn10)
		vals = append(vals, row.TrialColumn11)
		vals = append(vals, row.TrialColumn12)
		vals = append(vals, row.TrialColumn13)
		vals = append(vals, row.TrialColumn14)
		vals = append(vals, row.TrialColumn15)
		vals = append(vals, row.TrialColumn16)
		vals = append(vals, row.TrialColumn17)
		vals = append(vals, row.TrialColumn18)
		vals = append(vals, row.TrialColumn19)
		vals = append(vals, row.TrialColumn20)
		vals = append(vals, row.TrialColumn21)
		vals = append(vals, row.TrialColumn22)
		vals = append(vals, row.TrialColumn23)
		vals = append(vals, row.TrialColumn24)
		vals = append(vals, row.TrialColumn25)
		vals = append(vals, row.TrialColumn26)
		vals = append(vals, row.TrialColumn27)
		vals = append(vals, row.TrialColumn28)
		vals = append(vals, row.TrialColumn29)
		vals = append(vals, row.TrialColumn30)
		vals = append(vals, row.TrialColumn31)
		vals = append(vals, row.TrialColumn32)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

//

// UserMetaInfo represents a row from 'public.user_meta_info'.

// Manualy copy this to project
type __UserMetaInfo struct {
	UserId              int `json:"UserId"`              // UserId -
	IsNotificationDirty int `json:"IsNotificationDirty"` // IsNotificationDirty -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserMetaInfo exists in the database.
func (umi *UserMetaInfo) Exists() bool {
	return umi._exists
}

// Deleted provides information if the UserMetaInfo has been deleted from the database.
func (umi *UserMetaInfo) Deleted() bool {
	return umi._deleted
}

// Insert inserts the UserMetaInfo to the database.
func (umi *UserMetaInfo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if umi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_meta_info (` +
		`IsNotificationDirty` +
		`) VALUES (` +
		`$1` +
		`)`

	// run query
	XOLog(sqlstr, umi.Isnotificationdirty)
	res, err := db.Exec(sqlstr, umi.Isnotificationdirty)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	umi.Userid = int(id)
	umi._exists = true

	return nil
}

// Insert inserts the UserMetaInfo to the database.
func (umi *UserMetaInfo) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.user_meta_info (` +
		`IsNotificationDirty` +
		`) VALUES (` +
		`$1` +
		`)`

	// run query
	XOLog(sqlstr, umi.Isnotificationdirty)
	res, err := db.Exec(sqlstr, umi.Isnotificationdirty)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	umi.Userid = int(id)
	umi._exists = true

	return nil
}

// Update updates the UserMetaInfo in the database.
func (umi *UserMetaInfo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !umi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if umi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_meta_info SET ` +
		`IsNotificationDirty = $1` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, umi.Isnotificationdirty, umi.Userid)
	_, err = db.Exec(sqlstr, umi.Isnotificationdirty, umi.Userid)
	return err
}

// Save saves the UserMetaInfo to the database.
func (umi *UserMetaInfo) Save(db XODB) error {
	if umi.Exists() {
		return umi.Update(db)
	}

	return umi.Replace(db)
}

// Delete deletes the UserMetaInfo from the database.
func (umi *UserMetaInfo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !umi._exists {
		return nil
	}

	// if deleted, bail
	if umi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_meta_info WHERE UserId = ?`

	// run query
	XOLog(sqlstr, umi.Userid)
	_, err = db.Exec(sqlstr, umi.Userid)
	if err != nil {
		return err
	}

	// set deleted
	umi._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __UserMetaInfo_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __UserMetaInfo_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __UserMetaInfo_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUserMetaInfo_Deleter() *__UserMetaInfo_Deleter {
	d := __UserMetaInfo_Deleter{whereSep: " AND "}
	return &d
}

func NewUserMetaInfo_Updater() *__UserMetaInfo_Updater {
	u := __UserMetaInfo_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUserMetaInfo_Selector() *__UserMetaInfo_Selector {
	u := __UserMetaInfo_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__UserMetaInfo_Deleter) Or() *__UserMetaInfo_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__UserMetaInfo_Deleter) UserId_In(ins []int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Deleter) UserId_NotIn(ins []int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Deleter) UserId_EQ(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) UserId_NotEQ(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) UserId_LT(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) UserId_LE(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) UserId_GT(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) UserId_GE(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserMetaInfo_Deleter) IsNotificationDirty_In(ins []int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Deleter) IsNotificationDirty_NotIn(ins []int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_EQ(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_NotEQ(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_LT(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_LE(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_GT(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Deleter) IsNotificationDirty_GE(val int) *__UserMetaInfo_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserMetaInfo_Updater) Or() *__UserMetaInfo_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__UserMetaInfo_Updater) UserId_In(ins []int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Updater) UserId_NotIn(ins []int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Updater) UserId_EQ(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) UserId_NotEQ(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) UserId_LT(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) UserId_LE(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) UserId_GT(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) UserId_GE(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserMetaInfo_Updater) IsNotificationDirty_In(ins []int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Updater) IsNotificationDirty_NotIn(ins []int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_EQ(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_NotEQ(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_LT(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_LE(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_GT(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Updater) IsNotificationDirty_GE(val int) *__UserMetaInfo_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserMetaInfo_Selector) Or() *__UserMetaInfo_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__UserMetaInfo_Selector) UserId_In(ins []int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Selector) UserId_NotIn(ins []int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Selector) UserId_EQ(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) UserId_NotEQ(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) UserId_LT(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) UserId_LE(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) UserId_GT(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) UserId_GE(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserMetaInfo_Selector) IsNotificationDirty_In(ins []int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserMetaInfo_Selector) IsNotificationDirty_NotIn(ins []int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " IsNotificationDirty NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_EQ(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_NotEQ(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_LT(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_LE(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_GT(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserMetaInfo_Selector) IsNotificationDirty_GE(val int) *__UserMetaInfo_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " IsNotificationDirty >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

////////ints

////////ints

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__UserMetaInfo_Updater) UserId(newVal int) *__UserMetaInfo_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__UserMetaInfo_Updater) UserId_Increment(count int) *__UserMetaInfo_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

func (u *__UserMetaInfo_Updater) IsNotificationDirty(newVal int) *__UserMetaInfo_Updater {
	u.updates[" IsNotificationDirty = ? "] = newVal
	return u
}

func (u *__UserMetaInfo_Updater) IsNotificationDirty_Increment(count int) *__UserMetaInfo_Updater {
	if count > 0 {
		u.updates[" IsNotificationDirty = IsNotificationDirty+? "] = count
	}

	if count < 0 {
		u.updates[" IsNotificationDirty = IsNotificationDirty-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__UserMetaInfo_Selector) OrderBy_UserId_Desc() *__UserMetaInfo_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__UserMetaInfo_Selector) OrderBy_UserId_Asc() *__UserMetaInfo_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__UserMetaInfo_Selector) Select_UserId() *__UserMetaInfo_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__UserMetaInfo_Selector) OrderBy_IsNotificationDirty_Desc() *__UserMetaInfo_Selector {
	u.orderBy = " ORDER BY IsNotificationDirty DESC "
	return u
}

func (u *__UserMetaInfo_Selector) OrderBy_IsNotificationDirty_Asc() *__UserMetaInfo_Selector {
	u.orderBy = " ORDER BY IsNotificationDirty ASC "
	return u
}

func (u *__UserMetaInfo_Selector) Select_IsNotificationDirty() *__UserMetaInfo_Selector {
	u.selectCol = "IsNotificationDirty"
	return u
}

func (u *__UserMetaInfo_Selector) Limit(num int) *__UserMetaInfo_Selector {
	u.limit = num
	return u
}

func (u *__UserMetaInfo_Selector) Offset(num int) *__UserMetaInfo_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__UserMetaInfo_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.user_meta_info"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__UserMetaInfo_Selector) GetRow(db *sqlx.DB) (*UserMetaInfo, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &UserMetaInfo{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__UserMetaInfo_Selector) GetRows(db *sqlx.DB) ([]UserMetaInfo, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []UserMetaInfo
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__UserMetaInfo_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__UserMetaInfo_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserMetaInfo_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserMetaInfo_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__UserMetaInfo_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.user_meta_info SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__UserMetaInfo_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.user_meta_info WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  UserMetaInfo ////////////////
func MassInsert_UserMetaInfo(rows []UserMetaInfo, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.user_meta_info (" +
		"IsNotificationDirty" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Isnotificationdirty)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_UserMetaInfo(rows []UserMetaInfo, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.user_meta_info (" +
		"IsNotificationDirty" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Isnotificationdirty)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

// UserPassword represents a row from 'public.user_password'.

// Manualy copy this to project
type __UserPassword struct {
	UserId      int    `json:"UserId"`      // UserId -
	Password    string `json:"Password"`    // Password -
	CreatedTime int    `json:"CreatedTime"` // CreatedTime -

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserPassword exists in the database.
func (up *UserPassword) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserPassword has been deleted from the database.
func (up *UserPassword) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserPassword to the database.
func (up *UserPassword) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.user_password (` +
		`Password, CreatedTime` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, up.Password, up.Createdtime)
	res, err := db.Exec(sqlstr, up.Password, up.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.Userid = int(id)
	up._exists = true

	return nil
}

// Insert inserts the UserPassword to the database.
func (up *UserPassword) Replace(db XODB) error {
	var err error

	// sql query
	const sqlstr = `REPLACE INTO public.user_password (` +
		`Password, CreatedTime` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, up.Password, up.Createdtime)
	res, err := db.Exec(sqlstr, up.Password, up.Createdtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.Userid = int(id)
	up._exists = true

	return nil
}

// Update updates the UserPassword in the database.
func (up *UserPassword) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.user_password SET ` +
		`Password = $1, CreatedTime = $2` +
		` WHERE UserId = ?`

	// run query
	XOLog(sqlstr, up.Password, up.Createdtime, up.Userid)
	_, err = db.Exec(sqlstr, up.Password, up.Createdtime, up.Userid)
	return err
}

// Save saves the UserPassword to the database.
func (up *UserPassword) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Replace(db)
}

// Delete deletes the UserPassword from the database.
func (up *UserPassword) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.user_password WHERE UserId = ?`

	// run query
	XOLog(sqlstr, up.Userid)
	_, err = db.Exec(sqlstr, up.Userid)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Querify gen - ME /////////////////////////////////////////
//.Name = table name
// _Deleter, _Updater

// orma types
type __UserPassword_Deleter struct {
	wheres   []whereClause
	whereSep string
}

type __UserPassword_Updater struct {
	wheres   []whereClause
	updates  map[string]interface{}
	whereSep string
}

type __UserPassword_Selector struct {
	wheres    []whereClause
	selectCol string
	whereSep  string
	orderBy   string //" order by id desc //for ints
	limit     int
	offset    int
}

func NewUserPassword_Deleter() *__UserPassword_Deleter {
	d := __UserPassword_Deleter{whereSep: " AND "}
	return &d
}

func NewUserPassword_Updater() *__UserPassword_Updater {
	u := __UserPassword_Updater{whereSep: " AND "}
	u.updates = make(map[string]interface{}, 10)
	return &u
}

func NewUserPassword_Selector() *__UserPassword_Selector {
	u := __UserPassword_Selector{whereSep: " AND ", selectCol: "*"}
	return &u
}

/////////////////////////////// Where for all /////////////////////////////
//// for ints all selector updater, deleter

////////ints
func (u *__UserPassword_Deleter) Or() *__UserPassword_Deleter {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Deleter) UserId_In(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) UserId_NotIn(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) UserId_EQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_NotEQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_LT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_LE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_GT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) UserId_GE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Deleter) CreatedTime_In(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) CreatedTime_NotIn(ins []int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) CreatedTime_EQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_NotEQ(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_LT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_LE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_GT(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Deleter) CreatedTime_GE(val int) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserPassword_Updater) Or() *__UserPassword_Updater {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Updater) UserId_In(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) UserId_NotIn(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) UserId_EQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_NotEQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_LT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_LE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_GT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) UserId_GE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Updater) CreatedTime_In(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) CreatedTime_NotIn(ins []int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) CreatedTime_EQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_NotEQ(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_LT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_LE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_GT(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Updater) CreatedTime_GE(val int) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints
func (u *__UserPassword_Selector) Or() *__UserPassword_Selector {
	u.whereSep = " OR "
	return u
}

func (u *__UserPassword_Selector) UserId_In(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) UserId_NotIn(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " UserId NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) UserId_EQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_NotEQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_LT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_LE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_GT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) UserId_GE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " UserId >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (u *__UserPassword_Selector) CreatedTime_In(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) CreatedTime_NotIn(ins []int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " CreatedTime NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) CreatedTime_EQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime = ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_NotEQ(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime != ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_LT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime < ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_LE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime <= ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_GT(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime > ? "
	d.wheres = append(d.wheres, w)

	return d
}

func (d *__UserPassword_Selector) CreatedTime_GE(val int) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " CreatedTime >= ? "
	d.wheres = append(d.wheres, w)

	return d
}

///// for strings //copy of above with type int -> string + rm if eq + $ms_str_cond

////////ints

func (u *__UserPassword_Deleter) Password_In(ins []string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Deleter) Password_NotIn(ins []string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Deleter) Password_Like(val string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Deleter) Password_EQ(val string) *__UserPassword_Deleter {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__UserPassword_Updater) Password_In(ins []string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Updater) Password_NotIn(ins []string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Updater) Password_Like(val string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Updater) Password_EQ(val string) *__UserPassword_Updater {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

////////ints

func (u *__UserPassword_Selector) Password_In(ins []string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

func (u *__UserPassword_Selector) Password_NotIn(ins []string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	for _, i := range ins {
		insWhere = append(insWhere, i)
	}
	w.args = insWhere
	w.condition = " Password NOT IN(" + helper.DbQuestionForSqlIn(len(ins)) + ") "
	u.wheres = append(u.wheres, w)

	return u
}

//must be used like: UserName_like("hamid%")
func (u *__UserPassword_Selector) Password_Like(val string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password LIKE ? "
	u.wheres = append(u.wheres, w)

	return u
}

func (d *__UserPassword_Selector) Password_EQ(val string) *__UserPassword_Selector {
	w := whereClause{}
	var insWhere []interface{}
	insWhere = append(insWhere, val)
	w.args = insWhere
	w.condition = " Password = ? "
	d.wheres = append(d.wheres, w)

	return d
}

/// End of wheres for selectors , updators, deletor

/////////////////////////////// Updater /////////////////////////////

//ints

func (u *__UserPassword_Updater) UserId(newVal int) *__UserPassword_Updater {
	u.updates[" UserId = ? "] = newVal
	return u
}

func (u *__UserPassword_Updater) UserId_Increment(count int) *__UserPassword_Updater {
	if count > 0 {
		u.updates[" UserId = UserId+? "] = count
	}

	if count < 0 {
		u.updates[" UserId = UserId-? "] = -(count) //make it positive
	}

	return u
}

//string

//ints

//string
func (u *__UserPassword_Updater) Password(newVal string) *__UserPassword_Updater {
	u.updates[" Password = ? "] = newVal
	return u
}

//ints

func (u *__UserPassword_Updater) CreatedTime(newVal int) *__UserPassword_Updater {
	u.updates[" CreatedTime = ? "] = newVal
	return u
}

func (u *__UserPassword_Updater) CreatedTime_Increment(count int) *__UserPassword_Updater {
	if count > 0 {
		u.updates[" CreatedTime = CreatedTime+? "] = count
	}

	if count < 0 {
		u.updates[" CreatedTime = CreatedTime-? "] = -(count) //make it positive
	}

	return u
}

//string

/////////////////////////////////////////////////////////////////////
/////////////////////// Selector ///////////////////////////////////

//Select_* can just be used with: .GetString() , .GetStringSlice(), .GetInt() ..GetIntSlice()

func (u *__UserPassword_Selector) OrderBy_UserId_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY UserId DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_UserId_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY UserId ASC "
	return u
}

func (u *__UserPassword_Selector) Select_UserId() *__UserPassword_Selector {
	u.selectCol = "UserId"
	return u
}

func (u *__UserPassword_Selector) OrderBy_Password_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY Password DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_Password_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY Password ASC "
	return u
}

func (u *__UserPassword_Selector) Select_Password() *__UserPassword_Selector {
	u.selectCol = "Password"
	return u
}

func (u *__UserPassword_Selector) OrderBy_CreatedTime_Desc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY CreatedTime DESC "
	return u
}

func (u *__UserPassword_Selector) OrderBy_CreatedTime_Asc() *__UserPassword_Selector {
	u.orderBy = " ORDER BY CreatedTime ASC "
	return u
}

func (u *__UserPassword_Selector) Select_CreatedTime() *__UserPassword_Selector {
	u.selectCol = "CreatedTime"
	return u
}

func (u *__UserPassword_Selector) Limit(num int) *__UserPassword_Selector {
	u.limit = num
	return u
}

func (u *__UserPassword_Selector) Offset(num int) *__UserPassword_Selector {
	u.offset = num
	return u
}

/////////////////////////  Queryer Selector  //////////////////////////////////
func (u *__UserPassword_Selector) _stoSql() (string, []interface{}) {
	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	sqlstr := "SELECT " + u.selectCol + " FROM public.user_password"

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	if u.orderBy != "" {
		sqlstr += u.orderBy
	}

	if u.limit != 0 {
		sqlstr += " LIMIT " + strconv.Itoa(u.limit)
	}

	if u.offset != 0 {
		sqlstr += " OFFSET " + strconv.Itoa(u.offset)
	}
	return sqlstr, whereArgs
}

func (u *__UserPassword_Selector) GetRow(db *sqlx.DB) (*UserPassword, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	row := &UserPassword{}
	//by Sqlx
	err = db.Get(row, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	row._exists = true

	return row, nil
}

func (u *__UserPassword_Selector) GetRows(db *sqlx.DB) ([]UserPassword, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []UserPassword
	//by Sqlx
	err = db.Unsafe().Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	for i := 0; i < len(rows); i++ {
		rows[i]._exists = true
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetString(db *sqlx.DB) (string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res string
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return "", err
	}

	return res, nil
}

func (u *__UserPassword_Selector) GetStringSlice(db *sqlx.DB) ([]string, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []string
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetIntSlice(db *sqlx.DB) ([]int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var rows []int
	//by Sqlx
	err = db.Select(&rows, sqlstr, whereArgs...)
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (u *__UserPassword_Selector) GetInt(db *sqlx.DB) (int, error) {
	var err error

	sqlstr, whereArgs := u._stoSql()

	XOLog(sqlstr, whereArgs)

	var res int
	//by Sqlx
	err = db.Get(&res, sqlstr, whereArgs...)
	if err != nil {
		return 0, err
	}

	return res, nil
}

/////////////////////////  Queryer Update Delete //////////////////////////////////
func (u *__UserPassword_Updater) Update(db XODB) (int, error) {
	var err error

	var updateArgs []interface{}
	var sqlUpdateArr []string
	for up, newVal := range u.updates {
		sqlUpdateArr = append(sqlUpdateArr, up)
		updateArgs = append(updateArgs, newVal)
	}
	sqlUpdate := strings.Join(sqlUpdateArr, ",")

	sqlWherrs, whereArgs := whereClusesToSql(u.wheres, u.whereSep)

	var allArgs []interface{}
	allArgs = append(allArgs, updateArgs...)
	allArgs = append(allArgs, whereArgs...)

	sqlstr := `UPDATE public.user_password SET ` + sqlUpdate

	if len(strings.Trim(sqlWherrs, " ")) > 0 { //2 for safty
		sqlstr += " WHERE " + sqlWherrs
	}

	XOLog(sqlstr, allArgs)
	res, err := db.Exec(sqlstr, allArgs...)
	if err != nil {
		return 0, err
	}

	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

func (d *__UserPassword_Deleter) Delete(db XODB) (int, error) {
	var err error
	var wheresArr []string
	for _, w := range d.wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, d.whereSep)

	var args []interface{}
	for _, w := range d.wheres {
		args = append(args, w.args...)
	}

	sqlstr := "DELETE FROM public.user_password WHERE " + wheresStr

	// run query
	XOLog(sqlstr, args)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return 0, err
	}

	// retrieve id
	num, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}

	return int(num), nil
}

///////////////////////// Mass insert - replace for  UserPassword ////////////////
func MassInsert_UserPassword(rows []UserPassword, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "INSERT INTO public.user_password (" +
		"Password, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Password)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassInsert len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

func MassReplace_UserPassword(rows []UserPassword, db XODB) error {
	var err error
	ln := len(rows)
	s := "(?,?)," //`(?, ?, ?, ?),`
	insVals_ := strings.Repeat(s, ln)
	insVals := insVals_[0 : len(insVals_)-1]
	// sql query
	sqlstr := "REPLACE INTO public.user_password (" +
		"Password, CreatedTime" +
		") VALUES " + insVals

	// run query
	vals := make([]interface{}, 0, ln*5) //5 fields

	for _, row := range rows {
		// vals = append(vals,row.UserId)
		vals = append(vals, row.Password)
		vals = append(vals, row.Createdtime)

	}

	XOLog(sqlstr, " MassReplace len = ", ln, vals)

	_, err = db.Exec(sqlstr, vals...)
	if err != nil {
		return err
	}

	return nil
}

//////////////////// Play ///////////////////////////////

//

//

//

// CommentsByPostid retrieves a row from 'public.comments' as a Comment.
//
// Generated from index 'PostId'.
func CommentsByPostid(db XODB, postid int) ([]*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, PostId, Text, CreatedTime ` +
		`FROM public.comments ` +
		`WHERE PostId = $1`

	// run query
	XOLog(sqlstr, postid)
	q, err := db.Query(sqlstr, postid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Comment{}
	for q.Next() {
		c := Comment{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.Userid, &c.Postid, &c.Text, &c.Createdtime)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CommentByID retrieves a row from 'public.comments' as a Comment.
//
// Generated from index 'comments_pkey'.
func CommentByID(db XODB, id int) (*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, PostId, Text, CreatedTime ` +
		`FROM public.comments ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	c := Comment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Userid, &c.Postid, &c.Text, &c.Createdtime)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// FollowingListByIDUserid retrieves a row from 'public.following_list' as a FollowingList.
//
// Generated from index 'following_list_pkey'.
func FollowingListByIDUserid(db XODB, id int, userid int) (*FollowingList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, ListType, Name, Count, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8 ` +
		`FROM public.following_list ` +
		`WHERE Id = $1 AND UserId = $2`

	// run query
	XOLog(sqlstr, id, userid)
	fl := FollowingList{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id, userid).Scan(&fl.ID, &fl.Userid, &fl.Listtype, &fl.Name, &fl.Count, &fl.TrialColumn6, &fl.TrialColumn7, &fl.TrialColumn8)
	if err != nil {
		return nil, err
	}

	return &fl, nil
}

// FollowingListMembersByFolloweduseridUserid retrieves a row from 'public.following_list_member' as a FollowingListMember.
//
// Generated from index 'FollowedUserId'.
func FollowingListMembersByFolloweduseridUserid(db XODB, followeduserid int, userid int) ([]*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6 ` +
		`FROM public.following_list_member ` +
		`WHERE FollowedUserId = $1 AND UserId = $2`

	// run query
	XOLog(sqlstr, followeduserid, userid)
	q, err := db.Query(sqlstr, followeduserid, userid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FollowingListMember{}
	for q.Next() {
		flm := FollowingListMember{
			_exists: true,
		}

		// scan
		err = q.Scan(&flm.ID, &flm.Listid, &flm.Userid, &flm.Followeduserid, &flm.Followtype, &flm.TrialColumn6)
		if err != nil {
			return nil, err
		}

		res = append(res, &flm)
	}

	return res, nil
}

// FollowingListMemberByUseridFolloweduserid retrieves a row from 'public.following_list_member' as a FollowingListMember.
//
// Generated from index 'UserId'.
func FollowingListMemberByUseridFolloweduserid(db XODB, userid int, followeduserid int) (*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6 ` +
		`FROM public.following_list_member ` +
		`WHERE UserId = $1 AND FollowedUserId = $2`

	// run query
	XOLog(sqlstr, userid, followeduserid)
	flm := FollowingListMember{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userid, followeduserid).Scan(&flm.ID, &flm.Listid, &flm.Userid, &flm.Followeduserid, &flm.Followtype, &flm.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &flm, nil
}

// FollowingListMemberByID retrieves a row from 'public.following_list_member' as a FollowingListMember.
//
// Generated from index 'following_list_member_pkey'.
func FollowingListMemberByID(db XODB, id int) (*FollowingListMember, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6 ` +
		`FROM public.following_list_member ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	flm := FollowingListMember{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&flm.ID, &flm.Listid, &flm.Userid, &flm.Followeduserid, &flm.Followtype, &flm.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &flm, nil
}

// FollowingListMemberHistoryByID retrieves a row from 'public.following_list_member_history' as a FollowingListMemberHistory.
//
// Generated from index 'following_list_member_history_pkey'.
func FollowingListMemberHistoryByID(db XODB, id int) (*FollowingListMemberHistory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ListId, UserId, FollowedUserId, FollowType, TRIAL_COLUMN6, TRIAL_COLUMN7 ` +
		`FROM public.following_list_member_history ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	flmh := FollowingListMemberHistory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&flmh.ID, &flmh.Listid, &flmh.Userid, &flmh.Followeduserid, &flmh.Followtype, &flmh.TrialColumn6, &flmh.TrialColumn7)
	if err != nil {
		return nil, err
	}

	return &flmh, nil
}

// LikeByID retrieves a row from 'public.likes' as a Like.
//
// Generated from index 'likes_pkey'.
func LikeByID(db XODB, id int) (*Like, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PostId, UserId, TypeId, CreatedTime ` +
		`FROM public.likes ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	l := Like{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&l.ID, &l.Postid, &l.Userid, &l.Typeid, &l.Createdtime)
	if err != nil {
		return nil, err
	}

	return &l, nil
}

// MediaByID retrieves a row from 'public.media' as a Media.
//
// Generated from index 'media_pkey'.
func MediaByID(db XODB, id int) (*Media, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, PostId, AlbumId, TypeId, TRIAL_COLUMN6, TRIAL_COLUMN7 ` +
		`FROM public.media ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	m := Media{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Userid, &m.Postid, &m.Albumid, &m.Typeid, &m.TrialColumn6, &m.TrialColumn7)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MessagesByTouserid retrieves a row from 'public.message' as a Message.
//
// Generated from index 'ToUserId'.
func MessagesByTouserid(db XODB, touserid int) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7 ` +
		`FROM public.message ` +
		`WHERE ToUserId = $1`

	// run query
	XOLog(sqlstr, touserid)
	q, err := db.Query(sqlstr, touserid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.Touserid, &m.Roomkey, &m.Messagekey, &m.Fromuserid, &m.TrialColumn6, &m.TrialColumn7)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MessageByID retrieves a row from 'public.message' as a Message.
//
// Generated from index 'message_pkey'.
func MessageByID(db XODB, id int) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, RoomKey, MessageKey, FromUserID, TRIAL_COLUMN6, TRIAL_COLUMN7 ` +
		`FROM public.message ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Touserid, &m.Roomkey, &m.Messagekey, &m.Fromuserid, &m.TrialColumn6, &m.TrialColumn7)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MsgDeletedFromServerByID retrieves a row from 'public.msg_deleted_from_server' as a MsgDeletedFromServer.
//
// Generated from index 'msg_deleted_from_server_pkey'.
func MsgDeletedFromServerByID(db XODB, id int) (*MsgDeletedFromServer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, PeerUserId, RoomKey, TRIAL_COLUMN6 ` +
		`FROM public.msg_deleted_from_server ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	mdfs := MsgDeletedFromServer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mdfs.ID, &mdfs.Touserid, &mdfs.Msgkey, &mdfs.Peeruserid, &mdfs.Roomkey, &mdfs.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &mdfs, nil
}

// MsgReceivedToPeerByID retrieves a row from 'public.msg_received_to_peer' as a MsgReceivedToPeer.
//
// Generated from index 'msg_received_to_peer_pkey'.
func MsgReceivedToPeerByID(db XODB, id int) (*MsgReceivedToPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6 ` +
		`FROM public.msg_received_to_peer ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	mrtp := MsgReceivedToPeer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mrtp.ID, &mrtp.Touserid, &mrtp.Msgkey, &mrtp.Roomkey, &mrtp.Peeruserid, &mrtp.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &mrtp, nil
}

// MsgSeenByPeerByID retrieves a row from 'public.msg_seen_by_peer' as a MsgSeenByPeer.
//
// Generated from index 'msg_seen_by_peer_pkey'.
func MsgSeenByPeerByID(db XODB, id int) (*MsgSeenByPeer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ToUserId, MsgKey, RoomKey, PeerUserId, TRIAL_COLUMN6 ` +
		`FROM public.msg_seen_by_peer ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	msbp := MsgSeenByPeer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&msbp.ID, &msbp.Touserid, &msbp.Msgkey, &msbp.Roomkey, &msbp.Peeruserid, &msbp.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &msbp, nil
}

// NotificationByForuseridID retrieves a row from 'public.notification' as a Notification.
//
// Generated from index 'ForUserId'.
func NotificationByForuseridID(db XODB, foruserid int, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9 ` +
		`FROM public.notification ` +
		`WHERE ForUserId = $1 AND Id = $2`

	// run query
	XOLog(sqlstr, foruserid, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, foruserid, id).Scan(&n.ID, &n.Foruserid, &n.Actoruserid, &n.Actiontypeid, &n.Objecttypeid, &n.TrialColumn6, &n.TrialColumn7, &n.TrialColumn8, &n.TrialColumn9)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NotificationByID retrieves a row from 'public.notification' as a Notification.
//
// Generated from index 'notification_pkey'.
func NotificationByID(db XODB, id int) (*Notification, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, ForUserId, ActorUserId, ActionTypeId, ObjectTypeId, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9 ` +
		`FROM public.notification ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	n := Notification{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.ID, &n.Foruserid, &n.Actoruserid, &n.Actiontypeid, &n.Objecttypeid, &n.TrialColumn6, &n.TrialColumn7, &n.TrialColumn8, &n.TrialColumn9)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NotificationRemovedByNotificationid retrieves a row from 'public.notification_removed' as a NotificationRemoved.
//
// Generated from index 'notification_removed_pkey'.
func NotificationRemovedByNotificationid(db XODB, notificationid int) (*NotificationRemoved, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`NotificationId, ForUserId ` +
		`FROM public.notification_removed ` +
		`WHERE NotificationId = $1`

	// run query
	XOLog(sqlstr, notificationid)
	nr := NotificationRemoved{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, notificationid).Scan(&nr.Notificationid, &nr.Foruserid)
	if err != nil {
		return nil, err
	}

	return &nr, nil
}

// PhoneContactsByPhonenormalizednumber retrieves a row from 'public.phone_contacts' as a PhoneContact.
//
// Generated from index 'PhoneNormalizedNumber'.
func PhoneContactsByPhonenormalizednumber(db XODB, phonenormalizednumber string) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10 ` +
		`FROM public.phone_contacts ` +
		`WHERE PhoneNormalizedNumber = $1`

	// run query
	XOLog(sqlstr, phonenormalizednumber)
	q, err := db.Query(sqlstr, phonenormalizednumber)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.ID, &pc.Phonedisplayname, &pc.Phonefamilyname, &pc.Phonenumber, &pc.Phonenormalizednumber, &pc.TrialColumn6, &pc.TrialColumn7, &pc.TrialColumn8, &pc.TrialColumn9, &pc.TrialColumn10)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactsByPhonenumber retrieves a row from 'public.phone_contacts' as a PhoneContact.
//
// Generated from index 'PhoneNumber'.
func PhoneContactsByPhonenumber(db XODB, phonenumber string) ([]*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10 ` +
		`FROM public.phone_contacts ` +
		`WHERE PhoneNumber = $1`

	// run query
	XOLog(sqlstr, phonenumber)
	q, err := db.Query(sqlstr, phonenumber)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*PhoneContact{}
	for q.Next() {
		pc := PhoneContact{
			_exists: true,
		}

		// scan
		err = q.Scan(&pc.ID, &pc.Phonedisplayname, &pc.Phonefamilyname, &pc.Phonenumber, &pc.Phonenormalizednumber, &pc.TrialColumn6, &pc.TrialColumn7, &pc.TrialColumn8, &pc.TrialColumn9, &pc.TrialColumn10)
		if err != nil {
			return nil, err
		}

		res = append(res, &pc)
	}

	return res, nil
}

// PhoneContactByID retrieves a row from 'public.phone_contacts' as a PhoneContact.
//
// Generated from index 'phone_contacts_pkey'.
func PhoneContactByID(db XODB, id int) (*PhoneContact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, PhoneDisplayName, PhoneFamilyName, PhoneNumber, PhoneNormalizedNumber, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10 ` +
		`FROM public.phone_contacts ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	pc := PhoneContact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&pc.ID, &pc.Phonedisplayname, &pc.Phonefamilyname, &pc.Phonenumber, &pc.Phonenormalizednumber, &pc.TrialColumn6, &pc.TrialColumn7, &pc.TrialColumn8, &pc.TrialColumn9, &pc.TrialColumn10)
	if err != nil {
		return nil, err
	}

	return &pc, nil
}

// PostByID retrieves a row from 'public.post' as a Post.
//
// Generated from index 'post_pkey'.
func PostByID(db XODB, id int) (*Post, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, TypeId, Text, FormatedText, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14 ` +
		`FROM public.post ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Post{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Userid, &p.Typeid, &p.Text, &p.Formatedtext, &p.TrialColumn6, &p.TrialColumn7, &p.TrialColumn8, &p.TrialColumn9, &p.TrialColumn10, &p.TrialColumn11, &p.TrialColumn12, &p.TrialColumn13, &p.TrialColumn14)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// RecommendUserByID retrieves a row from 'public.recommend_user' as a RecommendUser.
//
// Generated from index 'recommend_user_pkey'.
func RecommendUserByID(db XODB, id int) (*RecommendUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, TargetId, Weight, CreatedTime ` +
		`FROM public.recommend_user ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	ru := RecommendUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ru.ID, &ru.Userid, &ru.Targetid, &ru.Weight, &ru.Createdtime)
	if err != nil {
		return nil, err
	}

	return &ru, nil
}

// SearchClickedByID retrieves a row from 'public.search_clicked' as a SearchClicked.
//
// Generated from index 'search_clicked_pkey'.
func SearchClickedByID(db XODB, id int) (*SearchClicked, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Query, ClickType, TargetId, UserId, TRIAL_COLUMN6 ` +
		`FROM public.search_clicked ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	sc := SearchClicked{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&sc.ID, &sc.Query, &sc.Clicktype, &sc.Targetid, &sc.Userid, &sc.TrialColumn6)
	if err != nil {
		return nil, err
	}

	return &sc, nil
}

// SessionsByID retrieves a row from 'public.session' as a Session.
//
// Generated from index 'Id'.
func SessionsByID(db XODB, id int) ([]*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10 ` +
		`FROM public.session ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	q, err := db.Query(sqlstr, id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Session{}
	for q.Next() {
		s := Session{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.ID, &s.Userid, &s.Sessionuuid, &s.Clientuuid, &s.Deviceuuid, &s.TrialColumn6, &s.TrialColumn7, &s.TrialColumn8, &s.TrialColumn9, &s.TrialColumn10)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// SessionByID retrieves a row from 'public.session' as a Session.
//
// Generated from index 'session_pkey'.
func SessionByID(db XODB, id int) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserId, SessionUuid, ClientUuid, DeviceUuid, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10 ` +
		`FROM public.session ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Userid, &s.Sessionuuid, &s.Clientuuid, &s.Deviceuuid, &s.TrialColumn6, &s.TrialColumn7, &s.TrialColumn8, &s.TrialColumn9, &s.TrialColumn10)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// TagByName retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'Name'.
func TagByName(db XODB, name string) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM public.tags ` +
		`WHERE Name = $1`

	// run query
	XOLog(sqlstr, name)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&t.ID, &t.Name, &t.Count, &t.Isblocked, &t.Createdtime)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TagByID retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'tags_pkey'.
func TagByID(db XODB, id int) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Name, Count, IsBlocked, CreatedTime ` +
		`FROM public.tags ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.ID, &t.Name, &t.Count, &t.Isblocked, &t.Createdtime)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TagsPostByTagidPostid retrieves a row from 'public.tags_posts' as a TagsPost.
//
// Generated from index 'TagId'.
func TagsPostByTagidPostid(db XODB, tagid int, postid int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM public.tags_posts ` +
		`WHERE TagId = $1 AND PostId = $2`

	// run query
	XOLog(sqlstr, tagid, postid)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tagid, postid).Scan(&tp.ID, &tp.Tagid, &tp.Postid, &tp.Typeid, &tp.Createdtime)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}

// TagsPostByID retrieves a row from 'public.tags_posts' as a TagsPost.
//
// Generated from index 'tags_posts_pkey'.
func TagsPostByID(db XODB, id int) (*TagsPost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, TagId, PostId, TypeId, CreatedTime ` +
		`FROM public.tags_posts ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	tp := TagsPost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tp.ID, &tp.Tagid, &tp.Postid, &tp.Typeid, &tp.Createdtime)
	if err != nil {
		return nil, err
	}

	return &tp, nil
}

// UserByUsername retrieves a row from 'public.user' as a User.
//
// Generated from index 'UserName'.
func UserByUsername(db XODB, username string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32 ` +
		`FROM public.user ` +
		`WHERE UserName = $1`

	// run query
	XOLog(sqlstr, username)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.ID, &u.Username, &u.Firstname, &u.Lastname, &u.About, &u.TrialColumn6, &u.TrialColumn7, &u.TrialColumn8, &u.TrialColumn9, &u.TrialColumn10, &u.TrialColumn11, &u.TrialColumn12, &u.TrialColumn13, &u.TrialColumn14, &u.TrialColumn15, &u.TrialColumn16, &u.TrialColumn17, &u.TrialColumn18, &u.TrialColumn19, &u.TrialColumn20, &u.TrialColumn21, &u.TrialColumn22, &u.TrialColumn23, &u.TrialColumn24, &u.TrialColumn25, &u.TrialColumn26, &u.TrialColumn27, &u.TrialColumn28, &u.TrialColumn29, &u.TrialColumn30, &u.TrialColumn31, &u.TrialColumn32)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.user' as a User.
//
// Generated from index 'user_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, FirstName, LastName, About, TRIAL_COLUMN6, TRIAL_COLUMN7, TRIAL_COLUMN8, TRIAL_COLUMN9, TRIAL_COLUMN10, TRIAL_COLUMN11, TRIAL_COLUMN12, TRIAL_COLUMN13, TRIAL_COLUMN14, TRIAL_COLUMN15, TRIAL_COLUMN16, TRIAL_COLUMN17, TRIAL_COLUMN18, TRIAL_COLUMN19, TRIAL_COLUMN20, TRIAL_COLUMN21, TRIAL_COLUMN22, TRIAL_COLUMN23, TRIAL_COLUMN24, TRIAL_COLUMN25, TRIAL_COLUMN26, TRIAL_COLUMN27, TRIAL_COLUMN28, TRIAL_COLUMN29, TRIAL_COLUMN30, TRIAL_COLUMN31, TRIAL_COLUMN32 ` +
		`FROM public.user ` +
		`WHERE Id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Username, &u.Firstname, &u.Lastname, &u.About, &u.TrialColumn6, &u.TrialColumn7, &u.TrialColumn8, &u.TrialColumn9, &u.TrialColumn10, &u.TrialColumn11, &u.TrialColumn12, &u.TrialColumn13, &u.TrialColumn14, &u.TrialColumn15, &u.TrialColumn16, &u.TrialColumn17, &u.TrialColumn18, &u.TrialColumn19, &u.TrialColumn20, &u.TrialColumn21, &u.TrialColumn22, &u.TrialColumn23, &u.TrialColumn24, &u.TrialColumn25, &u.TrialColumn26, &u.TrialColumn27, &u.TrialColumn28, &u.TrialColumn29, &u.TrialColumn30, &u.TrialColumn31, &u.TrialColumn32)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserMetaInfoByUserid retrieves a row from 'public.user_meta_info' as a UserMetaInfo.
//
// Generated from index 'user_meta_info_pkey'.
func UserMetaInfoByUserid(db XODB, userid int) (*UserMetaInfo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UserId, IsNotificationDirty ` +
		`FROM public.user_meta_info ` +
		`WHERE UserId = $1`

	// run query
	XOLog(sqlstr, userid)
	umi := UserMetaInfo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userid).Scan(&umi.Userid, &umi.Isnotificationdirty)
	if err != nil {
		return nil, err
	}

	return &umi, nil
}

// UserPasswordByUserid retrieves a row from 'public.user_password' as a UserPassword.
//
// Generated from index 'user_password_pkey'.
func UserPasswordByUserid(db XODB, userid int) (*UserPassword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UserId, Password, CreatedTime ` +
		`FROM public.user_password ` +
		`WHERE UserId = $1`

	// run query
	XOLog(sqlstr, userid)
	up := UserPassword{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userid).Scan(&up.Userid, &up.Password, &up.Createdtime)
	if err != nil {
		return nil, err
	}

	return &up, nil
}

// XODB is the common interface for database operations that can be used with
// types from schema 'public'.
//
// This should work with database/sql.DB and database/sql.Tx.
type XODB interface {
	Exec(string, ...interface{}) (sql.Result, error)
	Query(string, ...interface{}) (*sql.Rows, error)
	QueryRow(string, ...interface{}) *sql.Row
}

// XOLog provides the log func used by generated queries.
var _sqlLogFile *os.File
var XOLog = func(strings ...interface{}) {
	if config.IS_DEBUG {
		if _sqlLogFile == nil {
			_sqlLogFile, _ = os.OpenFile("./logs/sql_"+helper.IntToStr(helper.TimeNow())+".sql", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
		}
		_sqlLogFile.WriteString(fmt.Sprintln(strings...))
		_sqlLogFile.Sync()
	}
}

// ScannerValuer is the common interface for types that implement both the
// database/sql.Scanner and sql/driver.Valuer interfaces.
type ScannerValuer interface {
	sql.Scanner
	driver.Valuer
}

// StringSlice is a slice of strings.
type StringSlice []string

// quoteEscapeRegex is the regex to match escaped characters in a string.
var quoteEscapeRegex = regexp.MustCompile(`([^\\]([\\]{2})*)\\"`)

// Scan satisfies the sql.Scanner interface for StringSlice.
func (ss *StringSlice) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid StringSlice")
	}

	// change quote escapes for csv parser
	str := quoteEscapeRegex.ReplaceAllString(string(buf), `$1""`)
	str = strings.Replace(str, `\\`, `\`, -1)

	// remove braces
	str = str[1 : len(str)-1]

	// bail if only one
	if len(str) == 0 {
		*ss = StringSlice([]string{})
		return nil
	}

	// parse with csv reader
	cr := csv.NewReader(strings.NewReader(str))
	slice, err := cr.Read()
	if err != nil {
		fmt.Printf("exiting!: %v\n", err)
		return err
	}

	*ss = StringSlice(slice)

	return nil
}

// Value satisfies the driver.Valuer interface for StringSlice.
func (ss StringSlice) Value() (driver.Value, error) {
	v := make([]string, len(ss))
	for i, s := range ss {
		v[i] = `"` + strings.Replace(strings.Replace(s, `\`, `\\\`, -1), `"`, `\"`, -1) + `"`
	}
	return "{" + strings.Join(v, ",") + "}", nil
}

// Slice is a slice of ScannerValuers.
type Slice []ScannerValuer

////////////// ME /////////////
type whereClause struct {
	condition string
	args      []interface{}
}

func whereClusesToSql(wheres []whereClause, whereSep string) (string, []interface{}) {
	var wheresArr []string
	for _, w := range wheres {
		wheresArr = append(wheresArr, w.condition)
	}
	wheresStr := strings.Join(wheresArr, whereSep)

	var args []interface{}
	for _, w := range wheres {
		args = append(args, w.args...)
	}
	return wheresStr, args
}
